/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#ifndef jit_CacheIROpsGenerated_h
#define jit_CacheIROpsGenerated_h

/* This file is generated by jit/GenerateCacheIRFiles.py. Do not edit! */

#define CACHE_IR_OPS(_)\
_(GuardToObject, 1)\
_(GuardIsObjectOrNull, 1)\
_(GuardIsNullOrUndefined, 1)\
_(GuardIsNull, 1)\
_(GuardIsUndefined, 1)\
_(GuardToBoolean, 1 + 1)\
_(GuardToString, 1)\
_(GuardToSymbol, 1)\
_(GuardToBigInt, 1)\
_(GuardIsNumber, 1)\
_(GuardToInt32, 1 + 1)\
_(GuardToInt32Index, 1 + 1)\
_(GuardToTypedArrayIndex, 1 + 1)\
_(GuardToInt32ModUint32, 1 + 1)\
_(GuardToUint8Clamped, 1 + 1)\
_(GuardNonDoubleType, 1 + 1)\
_(GuardShape, 1 + 1)\
_(GuardGroup, 1 + 1)\
_(GuardProto, 1 + 1)\
_(GuardClass, 1 + 1)\
_(GuardAnyClass, 1 + 1)\
_(GuardCompartment, 1 + 1 + 1)\
_(GuardIsExtensible, 1)\
_(GuardIsNativeObject, 1)\
_(GuardIsProxy, 1)\
_(GuardHasProxyHandler, 1 + 1)\
_(GuardNotDOMProxy, 1)\
_(GuardSpecificObject, 1 + 1)\
_(GuardSpecificFunction, 1 + 1 + 1)\
_(GuardSpecificAtom, 1 + 1)\
_(GuardSpecificSymbol, 1 + 1)\
_(GuardSpecificNativeFunction, 1 + sizeof(uintptr_t))\
_(GuardMagicValue, 1 + 1)\
_(GuardFrameHasNoArgumentsObject, 0)\
_(GuardNoDenseElements, 1)\
_(GuardAndGetIndexFromString, 1 + 1)\
_(GuardAndGetInt32FromString, 1 + 1)\
_(GuardAndGetNumberFromString, 1 + 1)\
_(GuardAndGetNumberFromBoolean, 1 + 1)\
_(GuardAndGetIterator, 1 + 1 + 1 + 1)\
_(GuardHasGetterSetter, 1 + 1)\
_(GuardGroupHasUnanalyzedNewScript, 1)\
_(GuardIndexIsNonNegative, 1)\
_(GuardIndexGreaterThanArrayLength, 1 + 1)\
_(GuardIndexIsValidUpdateOrAdd, 1 + 1)\
_(GuardIndexGreaterThanDenseInitLength, 1 + 1)\
_(GuardTagNotEqual, 1 + 1)\
_(GuardXrayExpandoShapeAndDefaultProto, 1 + 1 + 1)\
_(GuardFunctionPrototype, 1 + 1 + 1)\
_(GuardNoAllocationMetadataBuilder, 0)\
_(GuardObjectGroupNotPretenured, 1)\
_(GuardFunctionHasJitEntry, 1 + 1)\
_(GuardFunctionIsNative, 1)\
_(GuardFunctionIsConstructor, 1)\
_(GuardNotClassConstructor, 1)\
_(GuardFunApply, 1 + 1)\
_(LoadObject, 1 + 1)\
_(LoadProto, 1 + 1)\
_(LoadEnclosingEnvironment, 1 + 1)\
_(LoadWrapperTarget, 1 + 1)\
_(LoadValueTag, 1 + 1)\
_(LoadArgumentFixedSlot, 1 + 1)\
_(LoadArgumentDynamicSlot, 1 + 1 + 1)\
_(TruncateDoubleToUInt32, 1 + 1)\
_(MegamorphicLoadSlotResult, 1 + 1 + 1)\
_(MegamorphicLoadSlotByValueResult, 1 + 1 + 1)\
_(MegamorphicStoreSlot, 1 + 1 + 1 + 1)\
_(MegamorphicSetElement, 1 + 1 + 1 + 1)\
_(MegamorphicHasPropResult, 1 + 1 + 1)\
_(LoadDOMExpandoValue, 1 + 1)\
_(LoadDOMExpandoValueGuardGeneration, 1 + 1 + 1 + 1)\
_(LoadDOMExpandoValueIgnoreGeneration, 1 + 1)\
_(GuardDOMExpandoMissingOrGuardShape, 1 + 1)\
_(StoreFixedSlot, 1 + 1 + 1)\
_(StoreDynamicSlot, 1 + 1 + 1)\
_(AddAndStoreFixedSlot, 1 + 1 + 1 + 1 + 1 + 1)\
_(AddAndStoreDynamicSlot, 1 + 1 + 1 + 1 + 1 + 1)\
_(AllocateAndStoreDynamicSlot, 1 + 1 + 1 + 1 + 1 + 1 + 1)\
_(StoreTypedObjectReferenceProperty, 1 + 1 + 1 + 1 + 1)\
_(StoreTypedObjectScalarProperty, 1 + 1 + 1 + 1 + 1)\
_(StoreDenseElement, 1 + 1 + 1)\
_(StoreDenseElementHole, 1 + 1 + 1 + 1)\
_(ArrayPush, 1 + 1)\
_(ArrayJoinResult, 1)\
_(IsArrayResult, 1)\
_(IsObjectResult, 1)\
_(IsCallableResult, 1)\
_(IsConstructorResult, 1)\
_(MathAbsInt32Result, 1)\
_(MathAbsNumberResult, 1)\
_(MathSqrtNumberResult, 1)\
_(MathFloorToInt32Result, 1)\
_(MathCeilToInt32Result, 1)\
_(MathRoundToInt32Result, 1)\
_(MathFunctionNumberResult, 1 + 1)\
_(StoreTypedArrayElement, 1 + 1 + 1 + 1 + 1)\
_(StoreTypedObjectElement, 1 + 1 + 1 + 1 + 1)\
_(CallNativeSetter, 1 + 1 + 1)\
_(CallScriptedSetter, 1 + 1 + 1 + 1)\
_(CallSetArrayLength, 1 + 1 + 1)\
_(CallProxySet, 1 + 1 + 1 + 1)\
_(CallProxySetByValue, 1 + 1 + 1 + 1)\
_(CallAddOrUpdateSparseElementHelper, 1 + 1 + 1 + 1)\
_(CallInt32ToString, 1 + 1)\
_(CallNumberToString, 1 + 1)\
_(BooleanToString, 1 + 1)\
_(CallScriptedFunction, 1 + 1 + 1)\
_(CallNativeFunction, 1 + 1 + 1 + 1)\
_(CallClassHook, 1 + 1 + 1 + 1)\
_(MetaTwoByte, 1 + 1 + 1)\
_(LoadFixedSlotResult, 1 + 1)\
_(LoadDynamicSlotResult, 1 + 1)\
_(LoadTypedObjectResult, 1 + 1 + 1 + 1)\
_(LoadDenseElementResult, 1 + 1)\
_(LoadDenseElementHoleResult, 1 + 1)\
_(CallGetSparseElementResult, 1 + 1)\
_(LoadDenseElementExistsResult, 1 + 1)\
_(LoadTypedElementExistsResult, 1 + 1 + 1)\
_(LoadDenseElementHoleExistsResult, 1 + 1)\
_(LoadTypedArrayElementResult, 1 + 1 + 1 + 1)\
_(LoadTypedObjectElementResult, 1 + 1 + 1 + 1)\
_(LoadInt32ArrayLengthResult, 1)\
_(LoadArgumentsObjectArgResult, 1 + 1)\
_(LoadArgumentsObjectLengthResult, 1)\
_(LoadFunctionLengthResult, 1)\
_(LoadTypedArrayLengthResult, 1 + 1)\
_(LoadStringCharResult, 1 + 1)\
_(LoadStringCharCodeResult, 1 + 1)\
_(LoadStringLengthResult, 1)\
_(LoadFrameCalleeResult, 0)\
_(LoadFrameNumActualArgsResult, 0)\
_(LoadFrameArgumentResult, 1)\
_(LoadEnvironmentFixedSlotResult, 1 + 1)\
_(LoadEnvironmentDynamicSlotResult, 1 + 1)\
_(LoadObjectResult, 1)\
_(LoadStringResult, 1)\
_(LoadInt32Result, 1)\
_(LoadDoubleResult, 1)\
_(LoadBigIntResult, 1)\
_(CallScriptedGetterResult, 1 + 1 + 1)\
_(CallScriptedGetterByValueResult, 1 + 1 + 1)\
_(CallNativeGetterResult, 1 + 1)\
_(CallNativeGetterByValueResult, 1 + 1)\
_(CallProxyGetResult, 1 + 1)\
_(CallProxyGetByValueResult, 1 + 1)\
_(CallProxyHasPropResult, 1 + 1 + 1)\
_(CallObjectHasSparseElementResult, 1 + 1)\
_(CallNativeGetElementResult, 1 + 1)\
_(LoadUndefinedResult, 0)\
_(LoadBooleanResult, 1)\
_(LoadConstantStringResult, 1)\
_(LoadInstanceOfObjectResult, 1 + 1)\
_(LoadTypeOfObjectResult, 1)\
_(DoubleAddResult, 1 + 1)\
_(DoubleSubResult, 1 + 1)\
_(DoubleMulResult, 1 + 1)\
_(DoubleDivResult, 1 + 1)\
_(DoubleModResult, 1 + 1)\
_(DoublePowResult, 1 + 1)\
_(Int32AddResult, 1 + 1)\
_(Int32SubResult, 1 + 1)\
_(Int32MulResult, 1 + 1)\
_(Int32DivResult, 1 + 1)\
_(Int32ModResult, 1 + 1)\
_(Int32PowResult, 1 + 1)\
_(BigIntAddResult, 1 + 1)\
_(BigIntSubResult, 1 + 1)\
_(BigIntMulResult, 1 + 1)\
_(BigIntDivResult, 1 + 1)\
_(BigIntModResult, 1 + 1)\
_(BigIntPowResult, 1 + 1)\
_(Int32BitOrResult, 1 + 1)\
_(Int32BitXorResult, 1 + 1)\
_(Int32BitAndResult, 1 + 1)\
_(Int32LeftShiftResult, 1 + 1)\
_(Int32RightShiftResult, 1 + 1)\
_(Int32URightShiftResult, 1 + 1 + 1)\
_(Int32NotResult, 1)\
_(BigIntBitOrResult, 1 + 1)\
_(BigIntBitXorResult, 1 + 1)\
_(BigIntBitAndResult, 1 + 1)\
_(BigIntLeftShiftResult, 1 + 1)\
_(BigIntRightShiftResult, 1 + 1)\
_(BigIntNotResult, 1)\
_(Int32NegationResult, 1)\
_(DoubleNegationResult, 1)\
_(BigIntNegationResult, 1)\
_(Int32IncResult, 1)\
_(Int32DecResult, 1)\
_(DoubleIncResult, 1)\
_(DoubleDecResult, 1)\
_(BigIntIncResult, 1)\
_(BigIntDecResult, 1)\
_(LoadInt32TruthyResult, 1)\
_(LoadDoubleTruthyResult, 1)\
_(LoadStringTruthyResult, 1)\
_(LoadObjectTruthyResult, 1)\
_(LoadBigIntTruthyResult, 1)\
_(LoadValueResult, 1)\
_(LoadNewObjectFromTemplateResult, 1 + 4 + 4)\
_(CallStringConcatResult, 1 + 1)\
_(CallStringObjectConcatResult, 1 + 1)\
_(CallIsSuspendedGeneratorResult, 1)\
_(CompareStringResult, 1 + 1 + 1)\
_(CompareObjectResult, 1 + 1 + 1)\
_(CompareSymbolResult, 1 + 1 + 1)\
_(CompareInt32Result, 1 + 1 + 1)\
_(CompareDoubleResult, 1 + 1 + 1)\
_(CompareBigIntResult, 1 + 1 + 1)\
_(CompareBigIntInt32Result, 1 + 1 + 1)\
_(CompareInt32BigIntResult, 1 + 1 + 1)\
_(CompareBigIntNumberResult, 1 + 1 + 1)\
_(CompareNumberBigIntResult, 1 + 1 + 1)\
_(CompareBigIntStringResult, 1 + 1 + 1)\
_(CompareStringBigIntResult, 1 + 1 + 1)\
_(CompareObjectUndefinedNullResult, 1 + 1)\
_(CallPrintString, sizeof(uintptr_t))\
_(Breakpoint, 0)\
_(TypeMonitorResult, 0)\
_(ReturnFromIC, 0)\
_(WrapResult, 0)

#define CACHE_IR_WRITER_GENERATED \
private:\
void guardToObject_(ValOperandId input) {\
  writeOp(CacheOp::GuardToObject);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
public:\
void guardIsObjectOrNull(ValOperandId input) {\
  writeOp(CacheOp::GuardIsObjectOrNull);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void guardIsNullOrUndefined(ValOperandId input) {\
  writeOp(CacheOp::GuardIsNullOrUndefined);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void guardIsNull(ValOperandId input) {\
  writeOp(CacheOp::GuardIsNull);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void guardIsUndefined(ValOperandId input) {\
  writeOp(CacheOp::GuardIsUndefined);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
Int32OperandId guardToBoolean(ValOperandId input) {\
  writeOp(CacheOp::GuardToBoolean);\
  writeOperandId(input);\
  Int32OperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
private:\
void guardToString_(ValOperandId input) {\
  writeOp(CacheOp::GuardToString);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
public:\
private:\
void guardToSymbol_(ValOperandId input) {\
  writeOp(CacheOp::GuardToSymbol);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
public:\
private:\
void guardToBigInt_(ValOperandId input) {\
  writeOp(CacheOp::GuardToBigInt);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
public:\
private:\
void guardIsNumber_(ValOperandId input) {\
  writeOp(CacheOp::GuardIsNumber);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
public:\
Int32OperandId guardToInt32(ValOperandId input) {\
  writeOp(CacheOp::GuardToInt32);\
  writeOperandId(input);\
  Int32OperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
Int32OperandId guardToInt32Index(ValOperandId input) {\
  writeOp(CacheOp::GuardToInt32Index);\
  writeOperandId(input);\
  Int32OperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
Int32OperandId guardToTypedArrayIndex(ValOperandId input) {\
  writeOp(CacheOp::GuardToTypedArrayIndex);\
  writeOperandId(input);\
  Int32OperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
Int32OperandId guardToInt32ModUint32(ValOperandId input) {\
  writeOp(CacheOp::GuardToInt32ModUint32);\
  writeOperandId(input);\
  Int32OperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
Int32OperandId guardToUint8Clamped(ValOperandId input) {\
  writeOp(CacheOp::GuardToUint8Clamped);\
  writeOperandId(input);\
  Int32OperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
void guardNonDoubleType(ValOperandId input, ValueType type) {\
  writeOp(CacheOp::GuardNonDoubleType);\
  writeOperandId(input);\
  writeValueTypeImm(type);\
  assertLengthMatches();\
}\
void guardShape(ObjOperandId obj, Shape* shape) {\
  writeOp(CacheOp::GuardShape);\
  writeOperandId(obj);\
  writeShapeField(shape);\
  assertLengthMatches();\
}\
void guardGroup(ObjOperandId obj, ObjectGroup* group) {\
  writeOp(CacheOp::GuardGroup);\
  writeOperandId(obj);\
  writeGroupField(group);\
  assertLengthMatches();\
}\
void guardProto(ObjOperandId obj, JSObject* proto) {\
  writeOp(CacheOp::GuardProto);\
  writeOperandId(obj);\
  writeObjectField(proto);\
  assertLengthMatches();\
}\
void guardClass(ObjOperandId obj, GuardClassKind kind) {\
  writeOp(CacheOp::GuardClass);\
  writeOperandId(obj);\
  writeGuardClassKindImm(kind);\
  assertLengthMatches();\
}\
void guardAnyClass(ObjOperandId obj, const void* clasp) {\
  writeOp(CacheOp::GuardAnyClass);\
  writeOperandId(obj);\
  writeRawPointerField(clasp);\
  assertLengthMatches();\
}\
void guardCompartment(ObjOperandId obj, JSObject* global, const void* compartment) {\
  writeOp(CacheOp::GuardCompartment);\
  writeOperandId(obj);\
  writeObjectField(global);\
  writeRawPointerField(compartment);\
  assertLengthMatches();\
}\
void guardIsExtensible(ObjOperandId obj) {\
  writeOp(CacheOp::GuardIsExtensible);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void guardIsNativeObject(ObjOperandId obj) {\
  writeOp(CacheOp::GuardIsNativeObject);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void guardIsProxy(ObjOperandId obj) {\
  writeOp(CacheOp::GuardIsProxy);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void guardHasProxyHandler(ObjOperandId obj, const void* handler) {\
  writeOp(CacheOp::GuardHasProxyHandler);\
  writeOperandId(obj);\
  writeRawPointerField(handler);\
  assertLengthMatches();\
}\
void guardNotDOMProxy(ObjOperandId obj) {\
  writeOp(CacheOp::GuardNotDOMProxy);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void guardSpecificObject(ObjOperandId obj, JSObject* expected) {\
  writeOp(CacheOp::GuardSpecificObject);\
  writeOperandId(obj);\
  writeObjectField(expected);\
  assertLengthMatches();\
}\
private:\
void guardSpecificFunction_(ObjOperandId obj, JSObject* expected, uintptr_t nargsAndFlags) {\
  writeOp(CacheOp::GuardSpecificFunction);\
  writeOperandId(obj);\
  writeObjectField(expected);\
  writeRawWordField(nargsAndFlags);\
  assertLengthMatches();\
}\
public:\
void guardSpecificAtom(StringOperandId str, JSAtom* expected) {\
  writeOp(CacheOp::GuardSpecificAtom);\
  writeOperandId(str);\
  writeStringField(expected);\
  assertLengthMatches();\
}\
void guardSpecificSymbol(SymbolOperandId sym, JS::Symbol* expected) {\
  writeOp(CacheOp::GuardSpecificSymbol);\
  writeOperandId(sym);\
  writeSymbolField(expected);\
  assertLengthMatches();\
}\
void guardSpecificNativeFunction(ObjOperandId obj, JSNative native) {\
  writeOp(CacheOp::GuardSpecificNativeFunction);\
  writeOperandId(obj);\
  writeJSNativeImm(native);\
  assertLengthMatches();\
}\
void guardMagicValue(ValOperandId val, JSWhyMagic magic) {\
  writeOp(CacheOp::GuardMagicValue);\
  writeOperandId(val);\
  writeJSWhyMagicImm(magic);\
  assertLengthMatches();\
}\
void guardFrameHasNoArgumentsObject() {\
  writeOp(CacheOp::GuardFrameHasNoArgumentsObject);\
  assertLengthMatches();\
}\
void guardNoDenseElements(ObjOperandId obj) {\
  writeOp(CacheOp::GuardNoDenseElements);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
Int32OperandId guardAndGetIndexFromString(StringOperandId str) {\
  writeOp(CacheOp::GuardAndGetIndexFromString);\
  writeOperandId(str);\
  Int32OperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
Int32OperandId guardAndGetInt32FromString(StringOperandId str) {\
  writeOp(CacheOp::GuardAndGetInt32FromString);\
  writeOperandId(str);\
  Int32OperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
NumberOperandId guardAndGetNumberFromString(StringOperandId str) {\
  writeOp(CacheOp::GuardAndGetNumberFromString);\
  writeOperandId(str);\
  NumberOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
NumberOperandId guardAndGetNumberFromBoolean(Int32OperandId boolean) {\
  writeOp(CacheOp::GuardAndGetNumberFromBoolean);\
  writeOperandId(boolean);\
  NumberOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
ObjOperandId guardAndGetIterator(ObjOperandId obj, JSObject* iter, const void* enumeratorsAddr) {\
  writeOp(CacheOp::GuardAndGetIterator);\
  writeOperandId(obj);\
  writeObjectField(iter);\
  writeRawPointerField(enumeratorsAddr);\
  ObjOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
void guardHasGetterSetter(ObjOperandId obj, Shape* shape) {\
  writeOp(CacheOp::GuardHasGetterSetter);\
  writeOperandId(obj);\
  writeShapeField(shape);\
  assertLengthMatches();\
}\
void guardGroupHasUnanalyzedNewScript(ObjectGroup* group) {\
  writeOp(CacheOp::GuardGroupHasUnanalyzedNewScript);\
  writeGroupField(group);\
  assertLengthMatches();\
}\
void guardIndexIsNonNegative(Int32OperandId index) {\
  writeOp(CacheOp::GuardIndexIsNonNegative);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void guardIndexGreaterThanArrayLength(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::GuardIndexGreaterThanArrayLength);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void guardIndexIsValidUpdateOrAdd(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::GuardIndexIsValidUpdateOrAdd);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void guardIndexGreaterThanDenseInitLength(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::GuardIndexGreaterThanDenseInitLength);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void guardTagNotEqual(ValueTagOperandId lhs, ValueTagOperandId rhs) {\
  writeOp(CacheOp::GuardTagNotEqual);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void guardXrayExpandoShapeAndDefaultProto(ObjOperandId obj, bool hasExpando, JSObject* shapeWrapper) {\
  writeOp(CacheOp::GuardXrayExpandoShapeAndDefaultProto);\
  writeOperandId(obj);\
  writeBoolImm(hasExpando);\
  writeObjectField(shapeWrapper);\
  assertLengthMatches();\
}\
void guardFunctionPrototype(ObjOperandId obj, ObjOperandId proto, uintptr_t slot) {\
  writeOp(CacheOp::GuardFunctionPrototype);\
  writeOperandId(obj);\
  writeOperandId(proto);\
  writeRawWordField(slot);\
  assertLengthMatches();\
}\
void guardNoAllocationMetadataBuilder() {\
  writeOp(CacheOp::GuardNoAllocationMetadataBuilder);\
  assertLengthMatches();\
}\
void guardObjectGroupNotPretenured(ObjectGroup* group) {\
  writeOp(CacheOp::GuardObjectGroupNotPretenured);\
  writeGroupField(group);\
  assertLengthMatches();\
}\
void guardFunctionHasJitEntry(ObjOperandId fun, bool constructing) {\
  writeOp(CacheOp::GuardFunctionHasJitEntry);\
  writeOperandId(fun);\
  writeBoolImm(constructing);\
  assertLengthMatches();\
}\
void guardFunctionIsNative(ObjOperandId fun) {\
  writeOp(CacheOp::GuardFunctionIsNative);\
  writeOperandId(fun);\
  assertLengthMatches();\
}\
void guardFunctionIsConstructor(ObjOperandId fun) {\
  writeOp(CacheOp::GuardFunctionIsConstructor);\
  writeOperandId(fun);\
  assertLengthMatches();\
}\
void guardNotClassConstructor(ObjOperandId fun) {\
  writeOp(CacheOp::GuardNotClassConstructor);\
  writeOperandId(fun);\
  assertLengthMatches();\
}\
void guardFunApply(Int32OperandId argc, CallFlags flags) {\
  writeOp(CacheOp::GuardFunApply);\
  writeOperandId(argc);\
  writeCallFlagsImm(flags);\
  assertLengthMatches();\
}\
ObjOperandId loadObject(JSObject* obj) {\
  writeOp(CacheOp::LoadObject);\
  ObjOperandId result(newOperandId());\
  writeOperandId(result);\
  writeObjectField(obj);\
  assertLengthMatches();\
  return result;\
}\
ObjOperandId loadProto(ObjOperandId obj) {\
  writeOp(CacheOp::LoadProto);\
  writeOperandId(obj);\
  ObjOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
ObjOperandId loadEnclosingEnvironment(ObjOperandId obj) {\
  writeOp(CacheOp::LoadEnclosingEnvironment);\
  writeOperandId(obj);\
  ObjOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
ObjOperandId loadWrapperTarget(ObjOperandId obj) {\
  writeOp(CacheOp::LoadWrapperTarget);\
  writeOperandId(obj);\
  ObjOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
ValueTagOperandId loadValueTag(ValOperandId val) {\
  writeOp(CacheOp::LoadValueTag);\
  writeOperandId(val);\
  ValueTagOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
private:\
ValOperandId loadArgumentFixedSlot_(uint32_t slotIndex) {\
  writeOp(CacheOp::LoadArgumentFixedSlot);\
  ValOperandId result(newOperandId());\
  writeOperandId(result);\
  writeByteImm(slotIndex);\
  assertLengthMatches();\
  return result;\
}\
public:\
private:\
ValOperandId loadArgumentDynamicSlot_(Int32OperandId argc, uint32_t slotIndex) {\
  writeOp(CacheOp::LoadArgumentDynamicSlot);\
  ValOperandId result(newOperandId());\
  writeOperandId(result);\
  writeOperandId(argc);\
  writeByteImm(slotIndex);\
  assertLengthMatches();\
  return result;\
}\
public:\
Int32OperandId truncateDoubleToUInt32(NumberOperandId input) {\
  writeOp(CacheOp::TruncateDoubleToUInt32);\
  writeOperandId(input);\
  Int32OperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
void megamorphicLoadSlotResult(ObjOperandId obj, PropertyName* name, bool handleMissing) {\
  writeOp(CacheOp::MegamorphicLoadSlotResult);\
  writeOperandId(obj);\
  writeStringField(name);\
  writeBoolImm(handleMissing);\
  assertLengthMatches();\
}\
void megamorphicLoadSlotByValueResult(ObjOperandId obj, ValOperandId id, bool handleMissing) {\
  writeOp(CacheOp::MegamorphicLoadSlotByValueResult);\
  writeOperandId(obj);\
  writeOperandId(id);\
  writeBoolImm(handleMissing);\
  assertLengthMatches();\
}\
void megamorphicStoreSlot(ObjOperandId obj, PropertyName* name, ValOperandId rhs, bool needsTypeBarrier) {\
  writeOp(CacheOp::MegamorphicStoreSlot);\
  writeOperandId(obj);\
  writeStringField(name);\
  writeOperandId(rhs);\
  writeBoolImm(needsTypeBarrier);\
  assertLengthMatches();\
}\
void megamorphicSetElement(ObjOperandId obj, ValOperandId id, ValOperandId rhs, bool strict) {\
  writeOp(CacheOp::MegamorphicSetElement);\
  writeOperandId(obj);\
  writeOperandId(id);\
  writeOperandId(rhs);\
  writeBoolImm(strict);\
  assertLengthMatches();\
}\
void megamorphicHasPropResult(ObjOperandId obj, ValOperandId id, bool hasOwn) {\
  writeOp(CacheOp::MegamorphicHasPropResult);\
  writeOperandId(obj);\
  writeOperandId(id);\
  writeBoolImm(hasOwn);\
  assertLengthMatches();\
}\
ValOperandId loadDOMExpandoValue(ObjOperandId obj) {\
  writeOp(CacheOp::LoadDOMExpandoValue);\
  writeOperandId(obj);\
  ValOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
ValOperandId loadDOMExpandoValueGuardGeneration(ObjOperandId obj, const void* expandoAndGeneration, uint64_t generation) {\
  writeOp(CacheOp::LoadDOMExpandoValueGuardGeneration);\
  writeOperandId(obj);\
  writeRawPointerField(expandoAndGeneration);\
  writeDOMExpandoGenerationField(generation);\
  ValOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
ValOperandId loadDOMExpandoValueIgnoreGeneration(ObjOperandId obj) {\
  writeOp(CacheOp::LoadDOMExpandoValueIgnoreGeneration);\
  writeOperandId(obj);\
  ValOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
void guardDOMExpandoMissingOrGuardShape(ValOperandId expando, Shape* shape) {\
  writeOp(CacheOp::GuardDOMExpandoMissingOrGuardShape);\
  writeOperandId(expando);\
  writeShapeField(shape);\
  assertLengthMatches();\
}\
void storeFixedSlot(ObjOperandId obj, uintptr_t offset, ValOperandId rhs) {\
  writeOp(CacheOp::StoreFixedSlot);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void storeDynamicSlot(ObjOperandId obj, uintptr_t offset, ValOperandId rhs) {\
  writeOp(CacheOp::StoreDynamicSlot);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void addAndStoreFixedSlot(ObjOperandId obj, uintptr_t offset, ValOperandId rhs, bool changeGroup, ObjectGroup* newGroup, Shape* newShape) {\
  writeOp(CacheOp::AddAndStoreFixedSlot);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  writeOperandId(rhs);\
  writeBoolImm(changeGroup);\
  writeGroupField(newGroup);\
  writeShapeField(newShape);\
  assertLengthMatches();\
}\
void addAndStoreDynamicSlot(ObjOperandId obj, uintptr_t offset, ValOperandId rhs, bool changeGroup, ObjectGroup* newGroup, Shape* newShape) {\
  writeOp(CacheOp::AddAndStoreDynamicSlot);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  writeOperandId(rhs);\
  writeBoolImm(changeGroup);\
  writeGroupField(newGroup);\
  writeShapeField(newShape);\
  assertLengthMatches();\
}\
void allocateAndStoreDynamicSlot(ObjOperandId obj, uintptr_t offset, ValOperandId rhs, bool changeGroup, ObjectGroup* newGroup, Shape* newShape, uintptr_t numNewSlots) {\
  writeOp(CacheOp::AllocateAndStoreDynamicSlot);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  writeOperandId(rhs);\
  writeBoolImm(changeGroup);\
  writeGroupField(newGroup);\
  writeShapeField(newShape);\
  writeRawWordField(numNewSlots);\
  assertLengthMatches();\
}\
void storeTypedObjectReferenceProperty(ObjOperandId obj, uintptr_t offset, TypedThingLayout layout, ReferenceType type, ValOperandId rhs) {\
  writeOp(CacheOp::StoreTypedObjectReferenceProperty);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  writeTypedThingLayoutImm(layout);\
  writeReferenceTypeImm(type);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void storeTypedObjectScalarProperty(ObjOperandId obj, uintptr_t offset, TypedThingLayout layout, Scalar::Type type, OperandId rhs) {\
  writeOp(CacheOp::StoreTypedObjectScalarProperty);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  writeTypedThingLayoutImm(layout);\
  writeScalarTypeImm(type);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void storeDenseElement(ObjOperandId obj, Int32OperandId index, ValOperandId rhs) {\
  writeOp(CacheOp::StoreDenseElement);\
  writeOperandId(obj);\
  writeOperandId(index);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void storeDenseElementHole(ObjOperandId obj, Int32OperandId index, ValOperandId rhs, bool handleAdd) {\
  writeOp(CacheOp::StoreDenseElementHole);\
  writeOperandId(obj);\
  writeOperandId(index);\
  writeOperandId(rhs);\
  writeBoolImm(handleAdd);\
  assertLengthMatches();\
}\
void arrayPush(ObjOperandId obj, ValOperandId rhs) {\
  writeOp(CacheOp::ArrayPush);\
  writeOperandId(obj);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void arrayJoinResult(ObjOperandId obj) {\
  writeOp(CacheOp::ArrayJoinResult);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void isArrayResult(ValOperandId input) {\
  writeOp(CacheOp::IsArrayResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void isObjectResult(ValOperandId input) {\
  writeOp(CacheOp::IsObjectResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void isCallableResult(ValOperandId input) {\
  writeOp(CacheOp::IsCallableResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void isConstructorResult(ObjOperandId obj) {\
  writeOp(CacheOp::IsConstructorResult);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void mathAbsInt32Result(Int32OperandId input) {\
  writeOp(CacheOp::MathAbsInt32Result);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void mathAbsNumberResult(NumberOperandId input) {\
  writeOp(CacheOp::MathAbsNumberResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void mathSqrtNumberResult(NumberOperandId input) {\
  writeOp(CacheOp::MathSqrtNumberResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void mathFloorToInt32Result(NumberOperandId input) {\
  writeOp(CacheOp::MathFloorToInt32Result);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void mathCeilToInt32Result(NumberOperandId input) {\
  writeOp(CacheOp::MathCeilToInt32Result);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void mathRoundToInt32Result(NumberOperandId input) {\
  writeOp(CacheOp::MathRoundToInt32Result);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void mathFunctionNumberResult(NumberOperandId input, UnaryMathFunction fun) {\
  writeOp(CacheOp::MathFunctionNumberResult);\
  writeOperandId(input);\
  writeUnaryMathFunctionImm(fun);\
  assertLengthMatches();\
}\
void storeTypedArrayElement(ObjOperandId obj, Scalar::Type elementType, Int32OperandId index, OperandId rhs, bool handleOOB) {\
  writeOp(CacheOp::StoreTypedArrayElement);\
  writeOperandId(obj);\
  writeScalarTypeImm(elementType);\
  writeOperandId(index);\
  writeOperandId(rhs);\
  writeBoolImm(handleOOB);\
  assertLengthMatches();\
}\
void storeTypedObjectElement(ObjOperandId obj, TypedThingLayout layout, Scalar::Type elementType, Int32OperandId index, OperandId rhs) {\
  writeOp(CacheOp::StoreTypedObjectElement);\
  writeOperandId(obj);\
  writeTypedThingLayoutImm(layout);\
  writeScalarTypeImm(elementType);\
  writeOperandId(index);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void callNativeSetter(ObjOperandId obj, JSObject* setter, ValOperandId rhs) {\
  writeOp(CacheOp::CallNativeSetter);\
  writeOperandId(obj);\
  writeObjectField(setter);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void callScriptedSetter(ObjOperandId obj, JSObject* setter, ValOperandId rhs, bool sameRealm) {\
  writeOp(CacheOp::CallScriptedSetter);\
  writeOperandId(obj);\
  writeObjectField(setter);\
  writeOperandId(rhs);\
  writeBoolImm(sameRealm);\
  assertLengthMatches();\
}\
void callSetArrayLength(ObjOperandId obj, bool strict, ValOperandId rhs) {\
  writeOp(CacheOp::CallSetArrayLength);\
  writeOperandId(obj);\
  writeBoolImm(strict);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void callProxySet(ObjOperandId obj, jsid id, ValOperandId rhs, bool strict) {\
  writeOp(CacheOp::CallProxySet);\
  writeOperandId(obj);\
  writeIdField(id);\
  writeOperandId(rhs);\
  writeBoolImm(strict);\
  assertLengthMatches();\
}\
void callProxySetByValue(ObjOperandId obj, ValOperandId id, ValOperandId rhs, bool strict) {\
  writeOp(CacheOp::CallProxySetByValue);\
  writeOperandId(obj);\
  writeOperandId(id);\
  writeOperandId(rhs);\
  writeBoolImm(strict);\
  assertLengthMatches();\
}\
void callAddOrUpdateSparseElementHelper(ObjOperandId obj, Int32OperandId id, ValOperandId rhs, bool strict) {\
  writeOp(CacheOp::CallAddOrUpdateSparseElementHelper);\
  writeOperandId(obj);\
  writeOperandId(id);\
  writeOperandId(rhs);\
  writeBoolImm(strict);\
  assertLengthMatches();\
}\
StringOperandId callInt32ToString(Int32OperandId input) {\
  writeOp(CacheOp::CallInt32ToString);\
  writeOperandId(input);\
  StringOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
StringOperandId callNumberToString(NumberOperandId input) {\
  writeOp(CacheOp::CallNumberToString);\
  writeOperandId(input);\
  StringOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
StringOperandId booleanToString(Int32OperandId input) {\
  writeOp(CacheOp::BooleanToString);\
  writeOperandId(input);\
  StringOperandId result(newOperandId());\
  writeOperandId(result);\
  assertLengthMatches();\
  return result;\
}\
void callScriptedFunction(ObjOperandId callee, Int32OperandId argc, CallFlags flags) {\
  writeOp(CacheOp::CallScriptedFunction);\
  writeOperandId(callee);\
  writeOperandId(argc);\
  writeCallFlagsImm(flags);\
  assertLengthMatches();\
}\
private:\
void callNativeFunction_(ObjOperandId callee, Int32OperandId argc, CallFlags flags, bool ignoresReturnValue) {\
  writeOp(CacheOp::CallNativeFunction);\
  writeOperandId(callee);\
  writeOperandId(argc);\
  writeCallFlagsImm(flags);\
  writeBoolImm(ignoresReturnValue);\
  assertLengthMatches();\
}\
public:\
private:\
void callClassHook_(ObjOperandId callee, Int32OperandId argc, CallFlags flags, const void* target) {\
  writeOp(CacheOp::CallClassHook);\
  writeOperandId(callee);\
  writeOperandId(argc);\
  writeCallFlagsImm(flags);\
  writeRawPointerField(target);\
  assertLengthMatches();\
}\
public:\
private:\
void metaTwoByte_(MetaTwoByteKind kind, JSObject* functionObject, JSObject* templateObject) {\
  writeOp(CacheOp::MetaTwoByte);\
  writeMetaTwoByteKindImm(kind);\
  writeObjectField(functionObject);\
  writeObjectField(templateObject);\
  assertLengthMatches();\
}\
public:\
void loadFixedSlotResult(ObjOperandId obj, uintptr_t offset) {\
  writeOp(CacheOp::LoadFixedSlotResult);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  assertLengthMatches();\
}\
void loadDynamicSlotResult(ObjOperandId obj, uintptr_t offset) {\
  writeOp(CacheOp::LoadDynamicSlotResult);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  assertLengthMatches();\
}\
void loadTypedObjectResult(ObjOperandId obj, TypedThingLayout layout, uint32_t typeDescr, uintptr_t offset) {\
  writeOp(CacheOp::LoadTypedObjectResult);\
  writeOperandId(obj);\
  writeTypedThingLayoutImm(layout);\
  writeByteImm(typeDescr);\
  writeRawWordField(offset);\
  assertLengthMatches();\
}\
void loadDenseElementResult(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::LoadDenseElementResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void loadDenseElementHoleResult(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::LoadDenseElementHoleResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void callGetSparseElementResult(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::CallGetSparseElementResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void loadDenseElementExistsResult(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::LoadDenseElementExistsResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void loadTypedElementExistsResult(ObjOperandId obj, Int32OperandId index, TypedThingLayout layout) {\
  writeOp(CacheOp::LoadTypedElementExistsResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  writeTypedThingLayoutImm(layout);\
  assertLengthMatches();\
}\
void loadDenseElementHoleExistsResult(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::LoadDenseElementHoleExistsResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void loadTypedArrayElementResult(ObjOperandId obj, Int32OperandId index, Scalar::Type elementType, bool handleOOB) {\
  writeOp(CacheOp::LoadTypedArrayElementResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  writeScalarTypeImm(elementType);\
  writeBoolImm(handleOOB);\
  assertLengthMatches();\
}\
void loadTypedObjectElementResult(ObjOperandId obj, Int32OperandId index, TypedThingLayout layout, Scalar::Type elementType) {\
  writeOp(CacheOp::LoadTypedObjectElementResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  writeTypedThingLayoutImm(layout);\
  writeScalarTypeImm(elementType);\
  assertLengthMatches();\
}\
void loadInt32ArrayLengthResult(ObjOperandId obj) {\
  writeOp(CacheOp::LoadInt32ArrayLengthResult);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void loadArgumentsObjectArgResult(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::LoadArgumentsObjectArgResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void loadArgumentsObjectLengthResult(ObjOperandId obj) {\
  writeOp(CacheOp::LoadArgumentsObjectLengthResult);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void loadFunctionLengthResult(ObjOperandId obj) {\
  writeOp(CacheOp::LoadFunctionLengthResult);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void loadTypedArrayLengthResult(ObjOperandId obj, JSObject* getter) {\
  writeOp(CacheOp::LoadTypedArrayLengthResult);\
  writeOperandId(obj);\
  writeObjectField(getter);\
  assertLengthMatches();\
}\
void loadStringCharResult(StringOperandId str, Int32OperandId index) {\
  writeOp(CacheOp::LoadStringCharResult);\
  writeOperandId(str);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void loadStringCharCodeResult(StringOperandId str, Int32OperandId index) {\
  writeOp(CacheOp::LoadStringCharCodeResult);\
  writeOperandId(str);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void loadStringLengthResult(StringOperandId str) {\
  writeOp(CacheOp::LoadStringLengthResult);\
  writeOperandId(str);\
  assertLengthMatches();\
}\
void loadFrameCalleeResult() {\
  writeOp(CacheOp::LoadFrameCalleeResult);\
  assertLengthMatches();\
}\
void loadFrameNumActualArgsResult() {\
  writeOp(CacheOp::LoadFrameNumActualArgsResult);\
  assertLengthMatches();\
}\
void loadFrameArgumentResult(Int32OperandId index) {\
  writeOp(CacheOp::LoadFrameArgumentResult);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void loadEnvironmentFixedSlotResult(ObjOperandId obj, uintptr_t offset) {\
  writeOp(CacheOp::LoadEnvironmentFixedSlotResult);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  assertLengthMatches();\
}\
void loadEnvironmentDynamicSlotResult(ObjOperandId obj, uintptr_t offset) {\
  writeOp(CacheOp::LoadEnvironmentDynamicSlotResult);\
  writeOperandId(obj);\
  writeRawWordField(offset);\
  assertLengthMatches();\
}\
void loadObjectResult(ObjOperandId obj) {\
  writeOp(CacheOp::LoadObjectResult);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void loadStringResult(StringOperandId str) {\
  writeOp(CacheOp::LoadStringResult);\
  writeOperandId(str);\
  assertLengthMatches();\
}\
void loadInt32Result(Int32OperandId val) {\
  writeOp(CacheOp::LoadInt32Result);\
  writeOperandId(val);\
  assertLengthMatches();\
}\
void loadDoubleResult(NumberOperandId val) {\
  writeOp(CacheOp::LoadDoubleResult);\
  writeOperandId(val);\
  assertLengthMatches();\
}\
void loadBigIntResult(BigIntOperandId val) {\
  writeOp(CacheOp::LoadBigIntResult);\
  writeOperandId(val);\
  assertLengthMatches();\
}\
void callScriptedGetterResult(ObjOperandId obj, JSObject* getter, bool sameRealm) {\
  writeOp(CacheOp::CallScriptedGetterResult);\
  writeOperandId(obj);\
  writeObjectField(getter);\
  writeBoolImm(sameRealm);\
  assertLengthMatches();\
}\
void callScriptedGetterByValueResult(ValOperandId val, JSObject* getter, bool sameRealm) {\
  writeOp(CacheOp::CallScriptedGetterByValueResult);\
  writeOperandId(val);\
  writeObjectField(getter);\
  writeBoolImm(sameRealm);\
  assertLengthMatches();\
}\
void callNativeGetterResult(ObjOperandId obj, JSObject* getter) {\
  writeOp(CacheOp::CallNativeGetterResult);\
  writeOperandId(obj);\
  writeObjectField(getter);\
  assertLengthMatches();\
}\
void callNativeGetterByValueResult(ValOperandId val, JSObject* getter) {\
  writeOp(CacheOp::CallNativeGetterByValueResult);\
  writeOperandId(val);\
  writeObjectField(getter);\
  assertLengthMatches();\
}\
void callProxyGetResult(ObjOperandId obj, jsid id) {\
  writeOp(CacheOp::CallProxyGetResult);\
  writeOperandId(obj);\
  writeIdField(id);\
  assertLengthMatches();\
}\
void callProxyGetByValueResult(ObjOperandId obj, ValOperandId id) {\
  writeOp(CacheOp::CallProxyGetByValueResult);\
  writeOperandId(obj);\
  writeOperandId(id);\
  assertLengthMatches();\
}\
void callProxyHasPropResult(ObjOperandId obj, ValOperandId id, bool hasOwn) {\
  writeOp(CacheOp::CallProxyHasPropResult);\
  writeOperandId(obj);\
  writeOperandId(id);\
  writeBoolImm(hasOwn);\
  assertLengthMatches();\
}\
void callObjectHasSparseElementResult(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::CallObjectHasSparseElementResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void callNativeGetElementResult(ObjOperandId obj, Int32OperandId index) {\
  writeOp(CacheOp::CallNativeGetElementResult);\
  writeOperandId(obj);\
  writeOperandId(index);\
  assertLengthMatches();\
}\
void loadUndefinedResult() {\
  writeOp(CacheOp::LoadUndefinedResult);\
  assertLengthMatches();\
}\
void loadBooleanResult(bool val) {\
  writeOp(CacheOp::LoadBooleanResult);\
  writeBoolImm(val);\
  assertLengthMatches();\
}\
void loadConstantStringResult(JSString* str) {\
  writeOp(CacheOp::LoadConstantStringResult);\
  writeStringField(str);\
  assertLengthMatches();\
}\
void loadInstanceOfObjectResult(ValOperandId lhs, ObjOperandId proto) {\
  writeOp(CacheOp::LoadInstanceOfObjectResult);\
  writeOperandId(lhs);\
  writeOperandId(proto);\
  assertLengthMatches();\
}\
void loadTypeOfObjectResult(ObjOperandId obj) {\
  writeOp(CacheOp::LoadTypeOfObjectResult);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void doubleAddResult(NumberOperandId lhs, NumberOperandId rhs) {\
  writeOp(CacheOp::DoubleAddResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void doubleSubResult(NumberOperandId lhs, NumberOperandId rhs) {\
  writeOp(CacheOp::DoubleSubResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void doubleMulResult(NumberOperandId lhs, NumberOperandId rhs) {\
  writeOp(CacheOp::DoubleMulResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void doubleDivResult(NumberOperandId lhs, NumberOperandId rhs) {\
  writeOp(CacheOp::DoubleDivResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void doubleModResult(NumberOperandId lhs, NumberOperandId rhs) {\
  writeOp(CacheOp::DoubleModResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void doublePowResult(NumberOperandId lhs, NumberOperandId rhs) {\
  writeOp(CacheOp::DoublePowResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32AddResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32AddResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32SubResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32SubResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32MulResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32MulResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32DivResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32DivResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32ModResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32ModResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32PowResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32PowResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntAddResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntAddResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntSubResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntSubResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntMulResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntMulResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntDivResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntDivResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntModResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntModResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntPowResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntPowResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32BitOrResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32BitOrResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32BitXorResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32BitXorResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32BitAndResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32BitAndResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32LeftShiftResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32LeftShiftResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32RightShiftResult(Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::Int32RightShiftResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void int32URightShiftResult(Int32OperandId lhs, Int32OperandId rhs, bool allowDouble) {\
  writeOp(CacheOp::Int32URightShiftResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  writeBoolImm(allowDouble);\
  assertLengthMatches();\
}\
void int32NotResult(Int32OperandId input) {\
  writeOp(CacheOp::Int32NotResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void bigIntBitOrResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntBitOrResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntBitXorResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntBitXorResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntBitAndResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntBitAndResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntLeftShiftResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntLeftShiftResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntRightShiftResult(BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::BigIntRightShiftResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void bigIntNotResult(BigIntOperandId input) {\
  writeOp(CacheOp::BigIntNotResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void int32NegationResult(Int32OperandId input) {\
  writeOp(CacheOp::Int32NegationResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void doubleNegationResult(NumberOperandId input) {\
  writeOp(CacheOp::DoubleNegationResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void bigIntNegationResult(BigIntOperandId input) {\
  writeOp(CacheOp::BigIntNegationResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void int32IncResult(Int32OperandId input) {\
  writeOp(CacheOp::Int32IncResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void int32DecResult(Int32OperandId input) {\
  writeOp(CacheOp::Int32DecResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void doubleIncResult(NumberOperandId input) {\
  writeOp(CacheOp::DoubleIncResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void doubleDecResult(NumberOperandId input) {\
  writeOp(CacheOp::DoubleDecResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void bigIntIncResult(BigIntOperandId input) {\
  writeOp(CacheOp::BigIntIncResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void bigIntDecResult(BigIntOperandId input) {\
  writeOp(CacheOp::BigIntDecResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void loadInt32TruthyResult(ValOperandId input) {\
  writeOp(CacheOp::LoadInt32TruthyResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void loadDoubleTruthyResult(NumberOperandId input) {\
  writeOp(CacheOp::LoadDoubleTruthyResult);\
  writeOperandId(input);\
  assertLengthMatches();\
}\
void loadStringTruthyResult(StringOperandId str) {\
  writeOp(CacheOp::LoadStringTruthyResult);\
  writeOperandId(str);\
  assertLengthMatches();\
}\
void loadObjectTruthyResult(ObjOperandId obj) {\
  writeOp(CacheOp::LoadObjectTruthyResult);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void loadBigIntTruthyResult(BigIntOperandId bigInt) {\
  writeOp(CacheOp::LoadBigIntTruthyResult);\
  writeOperandId(bigInt);\
  assertLengthMatches();\
}\
void loadValueResult(const Value& val) {\
  writeOp(CacheOp::LoadValueResult);\
  writeValueField(val);\
  assertLengthMatches();\
}\
void loadNewObjectFromTemplateResult(JSObject* templateObject, uint32_t disambiguationIdHi, uint32_t disambiguationIdLo) {\
  writeOp(CacheOp::LoadNewObjectFromTemplateResult);\
  writeObjectField(templateObject);\
  writeUInt32Imm(disambiguationIdHi);\
  writeUInt32Imm(disambiguationIdLo);\
  assertLengthMatches();\
}\
void callStringConcatResult(StringOperandId lhs, StringOperandId rhs) {\
  writeOp(CacheOp::CallStringConcatResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void callStringObjectConcatResult(ValOperandId lhs, ValOperandId rhs) {\
  writeOp(CacheOp::CallStringObjectConcatResult);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void callIsSuspendedGeneratorResult(ValOperandId val) {\
  writeOp(CacheOp::CallIsSuspendedGeneratorResult);\
  writeOperandId(val);\
  assertLengthMatches();\
}\
void compareStringResult(JSOp op, StringOperandId lhs, StringOperandId rhs) {\
  writeOp(CacheOp::CompareStringResult);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareObjectResult(JSOp op, ObjOperandId lhs, ObjOperandId rhs) {\
  writeOp(CacheOp::CompareObjectResult);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareSymbolResult(JSOp op, SymbolOperandId lhs, SymbolOperandId rhs) {\
  writeOp(CacheOp::CompareSymbolResult);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareInt32Result(JSOp op, Int32OperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::CompareInt32Result);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareDoubleResult(JSOp op, NumberOperandId lhs, NumberOperandId rhs) {\
  writeOp(CacheOp::CompareDoubleResult);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareBigIntResult(JSOp op, BigIntOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::CompareBigIntResult);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareBigIntInt32Result(JSOp op, BigIntOperandId lhs, Int32OperandId rhs) {\
  writeOp(CacheOp::CompareBigIntInt32Result);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareInt32BigIntResult(JSOp op, Int32OperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::CompareInt32BigIntResult);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareBigIntNumberResult(JSOp op, BigIntOperandId lhs, NumberOperandId rhs) {\
  writeOp(CacheOp::CompareBigIntNumberResult);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareNumberBigIntResult(JSOp op, NumberOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::CompareNumberBigIntResult);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareBigIntStringResult(JSOp op, BigIntOperandId lhs, StringOperandId rhs) {\
  writeOp(CacheOp::CompareBigIntStringResult);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareStringBigIntResult(JSOp op, StringOperandId lhs, BigIntOperandId rhs) {\
  writeOp(CacheOp::CompareStringBigIntResult);\
  writeJSOpImm(op);\
  writeOperandId(lhs);\
  writeOperandId(rhs);\
  assertLengthMatches();\
}\
void compareObjectUndefinedNullResult(JSOp op, ObjOperandId obj) {\
  writeOp(CacheOp::CompareObjectUndefinedNullResult);\
  writeJSOpImm(op);\
  writeOperandId(obj);\
  assertLengthMatches();\
}\
void callPrintString(const char* str) {\
  writeOp(CacheOp::CallPrintString);\
  writeStaticStringImm(str);\
  assertLengthMatches();\
}\
void breakpoint() {\
  writeOp(CacheOp::Breakpoint);\
  assertLengthMatches();\
}\
void typeMonitorResult() {\
  writeOp(CacheOp::TypeMonitorResult);\
  assertLengthMatches();\
}\
void returnFromIC() {\
  writeOp(CacheOp::ReturnFromIC);\
  assertLengthMatches();\
}\
void wrapResult() {\
  writeOp(CacheOp::WrapResult);\
  assertLengthMatches();\
}

#define CACHE_IR_COMPILER_SHARED_GENERATED \
MOZ_MUST_USE bool emitGuardToObject(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardToObject(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardToObject(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardIsObjectOrNull(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardIsObjectOrNull(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardIsObjectOrNull(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardIsNullOrUndefined(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardIsNullOrUndefined(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardIsNullOrUndefined(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardIsNull(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardIsNull(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardIsNull(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardIsUndefined(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardIsUndefined(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardIsUndefined(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardToBoolean(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToBoolean(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToBoolean(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardToString(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardToString(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardToString(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardToSymbol(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardToSymbol(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardToSymbol(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardToBigInt(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardToBigInt(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardToBigInt(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardIsNumber(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardIsNumber(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardIsNumber(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardToInt32(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToInt32(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToInt32(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardToInt32Index(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToInt32Index(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToInt32Index(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardToTypedArrayIndex(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToTypedArrayIndex(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToTypedArrayIndex(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardToInt32ModUint32(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToInt32ModUint32(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToInt32ModUint32(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardToUint8Clamped(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToUint8Clamped(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToUint8Clamped(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardNonDoubleType(ValOperandId inputId, ValueType type);\
MOZ_MUST_USE bool emitGuardNonDoubleType(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  ValueType type = reader.valueType();\
  return emitGuardNonDoubleType(inputId, type);\
}\
\
MOZ_MUST_USE bool emitGuardClass(ObjOperandId objId, GuardClassKind kind);\
MOZ_MUST_USE bool emitGuardClass(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  GuardClassKind kind = reader.guardClassKind();\
  return emitGuardClass(objId, kind);\
}\
\
MOZ_MUST_USE bool emitGuardIsExtensible(ObjOperandId objId);\
MOZ_MUST_USE bool emitGuardIsExtensible(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitGuardIsExtensible(objId);\
}\
\
MOZ_MUST_USE bool emitGuardIsNativeObject(ObjOperandId objId);\
MOZ_MUST_USE bool emitGuardIsNativeObject(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitGuardIsNativeObject(objId);\
}\
\
MOZ_MUST_USE bool emitGuardIsProxy(ObjOperandId objId);\
MOZ_MUST_USE bool emitGuardIsProxy(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitGuardIsProxy(objId);\
}\
\
MOZ_MUST_USE bool emitGuardNotDOMProxy(ObjOperandId objId);\
MOZ_MUST_USE bool emitGuardNotDOMProxy(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitGuardNotDOMProxy(objId);\
}\
\
MOZ_MUST_USE bool emitGuardSpecificNativeFunction(ObjOperandId objId, JSNative native);\
MOZ_MUST_USE bool emitGuardSpecificNativeFunction(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  JSNative native = reinterpret_cast<JSNative>(reader.pointer());\
  return emitGuardSpecificNativeFunction(objId, native);\
}\
\
MOZ_MUST_USE bool emitGuardMagicValue(ValOperandId valId, JSWhyMagic magic);\
MOZ_MUST_USE bool emitGuardMagicValue(CacheIRReader& reader) {\
  ValOperandId valId = reader.valOperandId();\
  JSWhyMagic magic = reader.whyMagic();\
  return emitGuardMagicValue(valId, magic);\
}\
\
MOZ_MUST_USE bool emitGuardNoDenseElements(ObjOperandId objId);\
MOZ_MUST_USE bool emitGuardNoDenseElements(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitGuardNoDenseElements(objId);\
}\
\
MOZ_MUST_USE bool emitGuardAndGetIndexFromString(StringOperandId strId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardAndGetIndexFromString(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardAndGetIndexFromString(strId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardAndGetInt32FromString(StringOperandId strId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardAndGetInt32FromString(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardAndGetInt32FromString(strId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardAndGetNumberFromString(StringOperandId strId, NumberOperandId resultId);\
MOZ_MUST_USE bool emitGuardAndGetNumberFromString(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  NumberOperandId resultId = reader.numberOperandId();\
  return emitGuardAndGetNumberFromString(strId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardAndGetNumberFromBoolean(Int32OperandId booleanId, NumberOperandId resultId);\
MOZ_MUST_USE bool emitGuardAndGetNumberFromBoolean(CacheIRReader& reader) {\
  Int32OperandId booleanId = reader.int32OperandId();\
  NumberOperandId resultId = reader.numberOperandId();\
  return emitGuardAndGetNumberFromBoolean(booleanId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardGroupHasUnanalyzedNewScript(uint32_t groupOffset);\
MOZ_MUST_USE bool emitGuardGroupHasUnanalyzedNewScript(CacheIRReader& reader) {\
  uint32_t groupOffset = reader.stubOffset();\
  return emitGuardGroupHasUnanalyzedNewScript(groupOffset);\
}\
\
MOZ_MUST_USE bool emitGuardIndexIsNonNegative(Int32OperandId indexId);\
MOZ_MUST_USE bool emitGuardIndexIsNonNegative(CacheIRReader& reader) {\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitGuardIndexIsNonNegative(indexId);\
}\
\
MOZ_MUST_USE bool emitGuardIndexGreaterThanArrayLength(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitGuardIndexGreaterThanArrayLength(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitGuardIndexGreaterThanArrayLength(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitGuardIndexIsValidUpdateOrAdd(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitGuardIndexIsValidUpdateOrAdd(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitGuardIndexIsValidUpdateOrAdd(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitGuardIndexGreaterThanDenseInitLength(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitGuardIndexGreaterThanDenseInitLength(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitGuardIndexGreaterThanDenseInitLength(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitGuardTagNotEqual(ValueTagOperandId lhsId, ValueTagOperandId rhsId);\
MOZ_MUST_USE bool emitGuardTagNotEqual(CacheIRReader& reader) {\
  ValueTagOperandId lhsId = reader.valueTagOperandId();\
  ValueTagOperandId rhsId = reader.valueTagOperandId();\
  return emitGuardTagNotEqual(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitGuardXrayExpandoShapeAndDefaultProto(ObjOperandId objId, bool hasExpando, uint32_t shapeWrapperOffset);\
MOZ_MUST_USE bool emitGuardXrayExpandoShapeAndDefaultProto(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  bool hasExpando = reader.readBool();\
  uint32_t shapeWrapperOffset = reader.stubOffset();\
  return emitGuardXrayExpandoShapeAndDefaultProto(objId, hasExpando, shapeWrapperOffset);\
}\
\
MOZ_MUST_USE bool emitGuardFunctionPrototype(ObjOperandId objId, ObjOperandId protoId, uint32_t slotOffset);\
MOZ_MUST_USE bool emitGuardFunctionPrototype(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ObjOperandId protoId = reader.objOperandId();\
  uint32_t slotOffset = reader.stubOffset();\
  return emitGuardFunctionPrototype(objId, protoId, slotOffset);\
}\
\
MOZ_MUST_USE bool emitGuardNoAllocationMetadataBuilder();\
MOZ_MUST_USE bool emitGuardNoAllocationMetadataBuilder(CacheIRReader& reader) {\
  return emitGuardNoAllocationMetadataBuilder();\
}\
\
MOZ_MUST_USE bool emitGuardObjectGroupNotPretenured(uint32_t groupOffset);\
MOZ_MUST_USE bool emitGuardObjectGroupNotPretenured(CacheIRReader& reader) {\
  uint32_t groupOffset = reader.stubOffset();\
  return emitGuardObjectGroupNotPretenured(groupOffset);\
}\
\
MOZ_MUST_USE bool emitGuardFunctionHasJitEntry(ObjOperandId funId, bool constructing);\
MOZ_MUST_USE bool emitGuardFunctionHasJitEntry(CacheIRReader& reader) {\
  ObjOperandId funId = reader.objOperandId();\
  bool constructing = reader.readBool();\
  return emitGuardFunctionHasJitEntry(funId, constructing);\
}\
\
MOZ_MUST_USE bool emitGuardFunctionIsNative(ObjOperandId funId);\
MOZ_MUST_USE bool emitGuardFunctionIsNative(CacheIRReader& reader) {\
  ObjOperandId funId = reader.objOperandId();\
  return emitGuardFunctionIsNative(funId);\
}\
\
MOZ_MUST_USE bool emitGuardFunctionIsConstructor(ObjOperandId funId);\
MOZ_MUST_USE bool emitGuardFunctionIsConstructor(CacheIRReader& reader) {\
  ObjOperandId funId = reader.objOperandId();\
  return emitGuardFunctionIsConstructor(funId);\
}\
\
MOZ_MUST_USE bool emitGuardNotClassConstructor(ObjOperandId funId);\
MOZ_MUST_USE bool emitGuardNotClassConstructor(CacheIRReader& reader) {\
  ObjOperandId funId = reader.objOperandId();\
  return emitGuardNotClassConstructor(funId);\
}\
\
MOZ_MUST_USE bool emitLoadObject(ObjOperandId resultId, uint32_t objOffset);\
MOZ_MUST_USE bool emitLoadObject(CacheIRReader& reader) {\
  ObjOperandId resultId = reader.objOperandId();\
  uint32_t objOffset = reader.stubOffset();\
  return emitLoadObject(resultId, objOffset);\
}\
\
MOZ_MUST_USE bool emitLoadProto(ObjOperandId objId, ObjOperandId resultId);\
MOZ_MUST_USE bool emitLoadProto(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ObjOperandId resultId = reader.objOperandId();\
  return emitLoadProto(objId, resultId);\
}\
\
MOZ_MUST_USE bool emitLoadEnclosingEnvironment(ObjOperandId objId, ObjOperandId resultId);\
MOZ_MUST_USE bool emitLoadEnclosingEnvironment(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ObjOperandId resultId = reader.objOperandId();\
  return emitLoadEnclosingEnvironment(objId, resultId);\
}\
\
MOZ_MUST_USE bool emitLoadWrapperTarget(ObjOperandId objId, ObjOperandId resultId);\
MOZ_MUST_USE bool emitLoadWrapperTarget(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ObjOperandId resultId = reader.objOperandId();\
  return emitLoadWrapperTarget(objId, resultId);\
}\
\
MOZ_MUST_USE bool emitLoadValueTag(ValOperandId valId, ValueTagOperandId resultId);\
MOZ_MUST_USE bool emitLoadValueTag(CacheIRReader& reader) {\
  ValOperandId valId = reader.valOperandId();\
  ValueTagOperandId resultId = reader.valueTagOperandId();\
  return emitLoadValueTag(valId, resultId);\
}\
\
MOZ_MUST_USE bool emitTruncateDoubleToUInt32(NumberOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitTruncateDoubleToUInt32(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitTruncateDoubleToUInt32(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitMegamorphicLoadSlotResult(ObjOperandId objId, uint32_t nameOffset, bool handleMissing);\
MOZ_MUST_USE bool emitMegamorphicLoadSlotResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t nameOffset = reader.stubOffset();\
  bool handleMissing = reader.readBool();\
  return emitMegamorphicLoadSlotResult(objId, nameOffset, handleMissing);\
}\
\
MOZ_MUST_USE bool emitMegamorphicLoadSlotByValueResult(ObjOperandId objId, ValOperandId idId, bool handleMissing);\
MOZ_MUST_USE bool emitMegamorphicLoadSlotByValueResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ValOperandId idId = reader.valOperandId();\
  bool handleMissing = reader.readBool();\
  return emitMegamorphicLoadSlotByValueResult(objId, idId, handleMissing);\
}\
\
MOZ_MUST_USE bool emitMegamorphicStoreSlot(ObjOperandId objId, uint32_t nameOffset, ValOperandId rhsId, bool needsTypeBarrier);\
MOZ_MUST_USE bool emitMegamorphicStoreSlot(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t nameOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  bool needsTypeBarrier = reader.readBool();\
  return emitMegamorphicStoreSlot(objId, nameOffset, rhsId, needsTypeBarrier);\
}\
\
MOZ_MUST_USE bool emitMegamorphicHasPropResult(ObjOperandId objId, ValOperandId idId, bool hasOwn);\
MOZ_MUST_USE bool emitMegamorphicHasPropResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ValOperandId idId = reader.valOperandId();\
  bool hasOwn = reader.readBool();\
  return emitMegamorphicHasPropResult(objId, idId, hasOwn);\
}\
\
MOZ_MUST_USE bool emitLoadDOMExpandoValue(ObjOperandId objId, ValOperandId resultId);\
MOZ_MUST_USE bool emitLoadDOMExpandoValue(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ValOperandId resultId = reader.valOperandId();\
  return emitLoadDOMExpandoValue(objId, resultId);\
}\
\
MOZ_MUST_USE bool emitLoadDOMExpandoValueIgnoreGeneration(ObjOperandId objId, ValOperandId resultId);\
MOZ_MUST_USE bool emitLoadDOMExpandoValueIgnoreGeneration(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ValOperandId resultId = reader.valOperandId();\
  return emitLoadDOMExpandoValueIgnoreGeneration(objId, resultId);\
}\
\
MOZ_MUST_USE bool emitStoreTypedObjectScalarProperty(ObjOperandId objId, uint32_t offsetOffset, TypedThingLayout layout, Scalar::Type type, uint32_t rhsId);\
MOZ_MUST_USE bool emitStoreTypedObjectScalarProperty(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  TypedThingLayout layout = reader.typedThingLayout();\
  Scalar::Type type = reader.scalarType();\
  uint32_t rhsId = reader.rawOperandId();\
  return emitStoreTypedObjectScalarProperty(objId, offsetOffset, layout, type, rhsId);\
}\
\
MOZ_MUST_USE bool emitArrayJoinResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitArrayJoinResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitArrayJoinResult(objId);\
}\
\
MOZ_MUST_USE bool emitIsObjectResult(ValOperandId inputId);\
MOZ_MUST_USE bool emitIsObjectResult(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitIsObjectResult(inputId);\
}\
\
MOZ_MUST_USE bool emitIsCallableResult(ValOperandId inputId);\
MOZ_MUST_USE bool emitIsCallableResult(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitIsCallableResult(inputId);\
}\
\
MOZ_MUST_USE bool emitIsConstructorResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitIsConstructorResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitIsConstructorResult(objId);\
}\
\
MOZ_MUST_USE bool emitMathAbsInt32Result(Int32OperandId inputId);\
MOZ_MUST_USE bool emitMathAbsInt32Result(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  return emitMathAbsInt32Result(inputId);\
}\
\
MOZ_MUST_USE bool emitMathAbsNumberResult(NumberOperandId inputId);\
MOZ_MUST_USE bool emitMathAbsNumberResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitMathAbsNumberResult(inputId);\
}\
\
MOZ_MUST_USE bool emitMathSqrtNumberResult(NumberOperandId inputId);\
MOZ_MUST_USE bool emitMathSqrtNumberResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitMathSqrtNumberResult(inputId);\
}\
\
MOZ_MUST_USE bool emitMathFloorToInt32Result(NumberOperandId inputId);\
MOZ_MUST_USE bool emitMathFloorToInt32Result(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitMathFloorToInt32Result(inputId);\
}\
\
MOZ_MUST_USE bool emitMathCeilToInt32Result(NumberOperandId inputId);\
MOZ_MUST_USE bool emitMathCeilToInt32Result(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitMathCeilToInt32Result(inputId);\
}\
\
MOZ_MUST_USE bool emitMathRoundToInt32Result(NumberOperandId inputId);\
MOZ_MUST_USE bool emitMathRoundToInt32Result(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitMathRoundToInt32Result(inputId);\
}\
\
MOZ_MUST_USE bool emitMathFunctionNumberResult(NumberOperandId inputId, UnaryMathFunction fun);\
MOZ_MUST_USE bool emitMathFunctionNumberResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  UnaryMathFunction fun = reader.unaryMathFunction();\
  return emitMathFunctionNumberResult(inputId, fun);\
}\
\
MOZ_MUST_USE bool emitStoreTypedArrayElement(ObjOperandId objId, Scalar::Type elementType, Int32OperandId indexId, uint32_t rhsId, bool handleOOB);\
MOZ_MUST_USE bool emitStoreTypedArrayElement(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Scalar::Type elementType = reader.scalarType();\
  Int32OperandId indexId = reader.int32OperandId();\
  uint32_t rhsId = reader.rawOperandId();\
  bool handleOOB = reader.readBool();\
  return emitStoreTypedArrayElement(objId, elementType, indexId, rhsId, handleOOB);\
}\
\
MOZ_MUST_USE bool emitStoreTypedObjectElement(ObjOperandId objId, TypedThingLayout layout, Scalar::Type elementType, Int32OperandId indexId, uint32_t rhsId);\
MOZ_MUST_USE bool emitStoreTypedObjectElement(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  TypedThingLayout layout = reader.typedThingLayout();\
  Scalar::Type elementType = reader.scalarType();\
  Int32OperandId indexId = reader.int32OperandId();\
  uint32_t rhsId = reader.rawOperandId();\
  return emitStoreTypedObjectElement(objId, layout, elementType, indexId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCallInt32ToString(Int32OperandId inputId, StringOperandId resultId);\
MOZ_MUST_USE bool emitCallInt32ToString(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  StringOperandId resultId = reader.stringOperandId();\
  return emitCallInt32ToString(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitCallNumberToString(NumberOperandId inputId, StringOperandId resultId);\
MOZ_MUST_USE bool emitCallNumberToString(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  StringOperandId resultId = reader.stringOperandId();\
  return emitCallNumberToString(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitBooleanToString(Int32OperandId inputId, StringOperandId resultId);\
MOZ_MUST_USE bool emitBooleanToString(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  StringOperandId resultId = reader.stringOperandId();\
  return emitBooleanToString(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitMetaTwoByte(MetaTwoByteKind kind, uint32_t functionObjectOffset, uint32_t templateObjectOffset);\
MOZ_MUST_USE bool emitMetaTwoByte(CacheIRReader& reader) {\
  MetaTwoByteKind kind = reader.metaKind<MetaTwoByteKind>();\
  uint32_t functionObjectOffset = reader.stubOffset();\
  uint32_t templateObjectOffset = reader.stubOffset();\
  return emitMetaTwoByte(kind, functionObjectOffset, templateObjectOffset);\
}\
\
MOZ_MUST_USE bool emitLoadTypedObjectResult(ObjOperandId objId, TypedThingLayout layout, uint8_t typeDescr, uint32_t offsetOffset);\
MOZ_MUST_USE bool emitLoadTypedObjectResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  TypedThingLayout layout = reader.typedThingLayout();\
  uint8_t typeDescr = reader.readByte();\
  uint32_t offsetOffset = reader.stubOffset();\
  return emitLoadTypedObjectResult(objId, layout, typeDescr, offsetOffset);\
}\
\
MOZ_MUST_USE bool emitLoadDenseElementResult(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadDenseElementResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadDenseElementResult(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadDenseElementHoleResult(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadDenseElementHoleResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadDenseElementHoleResult(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitCallGetSparseElementResult(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitCallGetSparseElementResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitCallGetSparseElementResult(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadDenseElementExistsResult(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadDenseElementExistsResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadDenseElementExistsResult(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadTypedElementExistsResult(ObjOperandId objId, Int32OperandId indexId, TypedThingLayout layout);\
MOZ_MUST_USE bool emitLoadTypedElementExistsResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  TypedThingLayout layout = reader.typedThingLayout();\
  return emitLoadTypedElementExistsResult(objId, indexId, layout);\
}\
\
MOZ_MUST_USE bool emitLoadDenseElementHoleExistsResult(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadDenseElementHoleExistsResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadDenseElementHoleExistsResult(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadTypedArrayElementResult(ObjOperandId objId, Int32OperandId indexId, Scalar::Type elementType, bool handleOOB);\
MOZ_MUST_USE bool emitLoadTypedArrayElementResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  Scalar::Type elementType = reader.scalarType();\
  bool handleOOB = reader.readBool();\
  return emitLoadTypedArrayElementResult(objId, indexId, elementType, handleOOB);\
}\
\
MOZ_MUST_USE bool emitLoadTypedObjectElementResult(ObjOperandId objId, Int32OperandId indexId, TypedThingLayout layout, Scalar::Type elementType);\
MOZ_MUST_USE bool emitLoadTypedObjectElementResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  TypedThingLayout layout = reader.typedThingLayout();\
  Scalar::Type elementType = reader.scalarType();\
  return emitLoadTypedObjectElementResult(objId, indexId, layout, elementType);\
}\
\
MOZ_MUST_USE bool emitLoadInt32ArrayLengthResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitLoadInt32ArrayLengthResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitLoadInt32ArrayLengthResult(objId);\
}\
\
MOZ_MUST_USE bool emitLoadArgumentsObjectArgResult(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadArgumentsObjectArgResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadArgumentsObjectArgResult(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadArgumentsObjectLengthResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitLoadArgumentsObjectLengthResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitLoadArgumentsObjectLengthResult(objId);\
}\
\
MOZ_MUST_USE bool emitLoadFunctionLengthResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitLoadFunctionLengthResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitLoadFunctionLengthResult(objId);\
}\
\
MOZ_MUST_USE bool emitLoadTypedArrayLengthResult(ObjOperandId objId, uint32_t getterOffset);\
MOZ_MUST_USE bool emitLoadTypedArrayLengthResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t getterOffset = reader.stubOffset();\
  return emitLoadTypedArrayLengthResult(objId, getterOffset);\
}\
\
MOZ_MUST_USE bool emitLoadStringCharResult(StringOperandId strId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadStringCharResult(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadStringCharResult(strId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadStringCharCodeResult(StringOperandId strId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadStringCharCodeResult(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadStringCharCodeResult(strId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadStringLengthResult(StringOperandId strId);\
MOZ_MUST_USE bool emitLoadStringLengthResult(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  return emitLoadStringLengthResult(strId);\
}\
\
MOZ_MUST_USE bool emitLoadObjectResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitLoadObjectResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitLoadObjectResult(objId);\
}\
\
MOZ_MUST_USE bool emitLoadStringResult(StringOperandId strId);\
MOZ_MUST_USE bool emitLoadStringResult(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  return emitLoadStringResult(strId);\
}\
\
MOZ_MUST_USE bool emitLoadInt32Result(Int32OperandId valId);\
MOZ_MUST_USE bool emitLoadInt32Result(CacheIRReader& reader) {\
  Int32OperandId valId = reader.int32OperandId();\
  return emitLoadInt32Result(valId);\
}\
\
MOZ_MUST_USE bool emitLoadDoubleResult(NumberOperandId valId);\
MOZ_MUST_USE bool emitLoadDoubleResult(CacheIRReader& reader) {\
  NumberOperandId valId = reader.numberOperandId();\
  return emitLoadDoubleResult(valId);\
}\
\
MOZ_MUST_USE bool emitLoadBigIntResult(BigIntOperandId valId);\
MOZ_MUST_USE bool emitLoadBigIntResult(CacheIRReader& reader) {\
  BigIntOperandId valId = reader.bigIntOperandId();\
  return emitLoadBigIntResult(valId);\
}\
\
MOZ_MUST_USE bool emitCallProxyGetByValueResult(ObjOperandId objId, ValOperandId idId);\
MOZ_MUST_USE bool emitCallProxyGetByValueResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ValOperandId idId = reader.valOperandId();\
  return emitCallProxyGetByValueResult(objId, idId);\
}\
\
MOZ_MUST_USE bool emitCallProxyHasPropResult(ObjOperandId objId, ValOperandId idId, bool hasOwn);\
MOZ_MUST_USE bool emitCallProxyHasPropResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ValOperandId idId = reader.valOperandId();\
  bool hasOwn = reader.readBool();\
  return emitCallProxyHasPropResult(objId, idId, hasOwn);\
}\
\
MOZ_MUST_USE bool emitCallObjectHasSparseElementResult(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitCallObjectHasSparseElementResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitCallObjectHasSparseElementResult(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitCallNativeGetElementResult(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitCallNativeGetElementResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitCallNativeGetElementResult(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadUndefinedResult();\
MOZ_MUST_USE bool emitLoadUndefinedResult(CacheIRReader& reader) {\
  return emitLoadUndefinedResult();\
}\
\
MOZ_MUST_USE bool emitLoadBooleanResult(bool val);\
MOZ_MUST_USE bool emitLoadBooleanResult(CacheIRReader& reader) {\
  bool val = reader.readBool();\
  return emitLoadBooleanResult(val);\
}\
\
MOZ_MUST_USE bool emitLoadInstanceOfObjectResult(ValOperandId lhsId, ObjOperandId protoId);\
MOZ_MUST_USE bool emitLoadInstanceOfObjectResult(CacheIRReader& reader) {\
  ValOperandId lhsId = reader.valOperandId();\
  ObjOperandId protoId = reader.objOperandId();\
  return emitLoadInstanceOfObjectResult(lhsId, protoId);\
}\
\
MOZ_MUST_USE bool emitLoadTypeOfObjectResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitLoadTypeOfObjectResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitLoadTypeOfObjectResult(objId);\
}\
\
MOZ_MUST_USE bool emitDoubleAddResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoubleAddResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoubleAddResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitDoubleSubResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoubleSubResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoubleSubResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitDoubleMulResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoubleMulResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoubleMulResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitDoubleDivResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoubleDivResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoubleDivResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitDoubleModResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoubleModResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoubleModResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitDoublePowResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoublePowResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoublePowResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32AddResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32AddResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32AddResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32SubResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32SubResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32SubResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32MulResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32MulResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32MulResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32DivResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32DivResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32DivResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32ModResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32ModResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32ModResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32PowResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32PowResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32PowResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntAddResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntAddResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntAddResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntSubResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntSubResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntSubResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntMulResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntMulResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntMulResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntDivResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntDivResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntDivResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntModResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntModResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntModResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntPowResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntPowResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntPowResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32BitOrResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32BitOrResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32BitOrResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32BitXorResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32BitXorResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32BitXorResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32BitAndResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32BitAndResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32BitAndResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32LeftShiftResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32LeftShiftResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32LeftShiftResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32RightShiftResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32RightShiftResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32RightShiftResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32URightShiftResult(Int32OperandId lhsId, Int32OperandId rhsId, bool allowDouble);\
MOZ_MUST_USE bool emitInt32URightShiftResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  bool allowDouble = reader.readBool();\
  return emitInt32URightShiftResult(lhsId, rhsId, allowDouble);\
}\
\
MOZ_MUST_USE bool emitInt32NotResult(Int32OperandId inputId);\
MOZ_MUST_USE bool emitInt32NotResult(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  return emitInt32NotResult(inputId);\
}\
\
MOZ_MUST_USE bool emitBigIntBitOrResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntBitOrResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntBitOrResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntBitXorResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntBitXorResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntBitXorResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntBitAndResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntBitAndResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntBitAndResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntLeftShiftResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntLeftShiftResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntLeftShiftResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntRightShiftResult(BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitBigIntRightShiftResult(CacheIRReader& reader) {\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitBigIntRightShiftResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitBigIntNotResult(BigIntOperandId inputId);\
MOZ_MUST_USE bool emitBigIntNotResult(CacheIRReader& reader) {\
  BigIntOperandId inputId = reader.bigIntOperandId();\
  return emitBigIntNotResult(inputId);\
}\
\
MOZ_MUST_USE bool emitInt32NegationResult(Int32OperandId inputId);\
MOZ_MUST_USE bool emitInt32NegationResult(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  return emitInt32NegationResult(inputId);\
}\
\
MOZ_MUST_USE bool emitDoubleNegationResult(NumberOperandId inputId);\
MOZ_MUST_USE bool emitDoubleNegationResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitDoubleNegationResult(inputId);\
}\
\
MOZ_MUST_USE bool emitBigIntNegationResult(BigIntOperandId inputId);\
MOZ_MUST_USE bool emitBigIntNegationResult(CacheIRReader& reader) {\
  BigIntOperandId inputId = reader.bigIntOperandId();\
  return emitBigIntNegationResult(inputId);\
}\
\
MOZ_MUST_USE bool emitInt32IncResult(Int32OperandId inputId);\
MOZ_MUST_USE bool emitInt32IncResult(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  return emitInt32IncResult(inputId);\
}\
\
MOZ_MUST_USE bool emitInt32DecResult(Int32OperandId inputId);\
MOZ_MUST_USE bool emitInt32DecResult(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  return emitInt32DecResult(inputId);\
}\
\
MOZ_MUST_USE bool emitDoubleIncResult(NumberOperandId inputId);\
MOZ_MUST_USE bool emitDoubleIncResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitDoubleIncResult(inputId);\
}\
\
MOZ_MUST_USE bool emitDoubleDecResult(NumberOperandId inputId);\
MOZ_MUST_USE bool emitDoubleDecResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitDoubleDecResult(inputId);\
}\
\
MOZ_MUST_USE bool emitBigIntIncResult(BigIntOperandId inputId);\
MOZ_MUST_USE bool emitBigIntIncResult(CacheIRReader& reader) {\
  BigIntOperandId inputId = reader.bigIntOperandId();\
  return emitBigIntIncResult(inputId);\
}\
\
MOZ_MUST_USE bool emitBigIntDecResult(BigIntOperandId inputId);\
MOZ_MUST_USE bool emitBigIntDecResult(CacheIRReader& reader) {\
  BigIntOperandId inputId = reader.bigIntOperandId();\
  return emitBigIntDecResult(inputId);\
}\
\
MOZ_MUST_USE bool emitLoadInt32TruthyResult(ValOperandId inputId);\
MOZ_MUST_USE bool emitLoadInt32TruthyResult(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitLoadInt32TruthyResult(inputId);\
}\
\
MOZ_MUST_USE bool emitLoadDoubleTruthyResult(NumberOperandId inputId);\
MOZ_MUST_USE bool emitLoadDoubleTruthyResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitLoadDoubleTruthyResult(inputId);\
}\
\
MOZ_MUST_USE bool emitLoadStringTruthyResult(StringOperandId strId);\
MOZ_MUST_USE bool emitLoadStringTruthyResult(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  return emitLoadStringTruthyResult(strId);\
}\
\
MOZ_MUST_USE bool emitLoadObjectTruthyResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitLoadObjectTruthyResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitLoadObjectTruthyResult(objId);\
}\
\
MOZ_MUST_USE bool emitLoadBigIntTruthyResult(BigIntOperandId bigIntId);\
MOZ_MUST_USE bool emitLoadBigIntTruthyResult(CacheIRReader& reader) {\
  BigIntOperandId bigIntId = reader.bigIntOperandId();\
  return emitLoadBigIntTruthyResult(bigIntId);\
}\
\
MOZ_MUST_USE bool emitLoadNewObjectFromTemplateResult(uint32_t templateObjectOffset, uint32_t disambiguationIdHi, uint32_t disambiguationIdLo);\
MOZ_MUST_USE bool emitLoadNewObjectFromTemplateResult(CacheIRReader& reader) {\
  uint32_t templateObjectOffset = reader.stubOffset();\
  uint32_t disambiguationIdHi = reader.uint32Immediate();\
  uint32_t disambiguationIdLo = reader.uint32Immediate();\
  return emitLoadNewObjectFromTemplateResult(templateObjectOffset, disambiguationIdHi, disambiguationIdLo);\
}\
\
MOZ_MUST_USE bool emitCallStringConcatResult(StringOperandId lhsId, StringOperandId rhsId);\
MOZ_MUST_USE bool emitCallStringConcatResult(CacheIRReader& reader) {\
  StringOperandId lhsId = reader.stringOperandId();\
  StringOperandId rhsId = reader.stringOperandId();\
  return emitCallStringConcatResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCallIsSuspendedGeneratorResult(ValOperandId valId);\
MOZ_MUST_USE bool emitCallIsSuspendedGeneratorResult(CacheIRReader& reader) {\
  ValOperandId valId = reader.valOperandId();\
  return emitCallIsSuspendedGeneratorResult(valId);\
}\
\
MOZ_MUST_USE bool emitCompareObjectResult(JSOp op, ObjOperandId lhsId, ObjOperandId rhsId);\
MOZ_MUST_USE bool emitCompareObjectResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  ObjOperandId lhsId = reader.objOperandId();\
  ObjOperandId rhsId = reader.objOperandId();\
  return emitCompareObjectResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareSymbolResult(JSOp op, SymbolOperandId lhsId, SymbolOperandId rhsId);\
MOZ_MUST_USE bool emitCompareSymbolResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  SymbolOperandId lhsId = reader.symbolOperandId();\
  SymbolOperandId rhsId = reader.symbolOperandId();\
  return emitCompareSymbolResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareInt32Result(JSOp op, Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitCompareInt32Result(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitCompareInt32Result(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareDoubleResult(JSOp op, NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitCompareDoubleResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitCompareDoubleResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareBigIntResult(JSOp op, BigIntOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitCompareBigIntResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitCompareBigIntResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareBigIntInt32Result(JSOp op, BigIntOperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitCompareBigIntInt32Result(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitCompareBigIntInt32Result(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareInt32BigIntResult(JSOp op, Int32OperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitCompareInt32BigIntResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  Int32OperandId lhsId = reader.int32OperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitCompareInt32BigIntResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareBigIntNumberResult(JSOp op, BigIntOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitCompareBigIntNumberResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitCompareBigIntNumberResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareNumberBigIntResult(JSOp op, NumberOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitCompareNumberBigIntResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  NumberOperandId lhsId = reader.numberOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitCompareNumberBigIntResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareBigIntStringResult(JSOp op, BigIntOperandId lhsId, StringOperandId rhsId);\
MOZ_MUST_USE bool emitCompareBigIntStringResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  BigIntOperandId lhsId = reader.bigIntOperandId();\
  StringOperandId rhsId = reader.stringOperandId();\
  return emitCompareBigIntStringResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareStringBigIntResult(JSOp op, StringOperandId lhsId, BigIntOperandId rhsId);\
MOZ_MUST_USE bool emitCompareStringBigIntResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  StringOperandId lhsId = reader.stringOperandId();\
  BigIntOperandId rhsId = reader.bigIntOperandId();\
  return emitCompareStringBigIntResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareObjectUndefinedNullResult(JSOp op, ObjOperandId objId);\
MOZ_MUST_USE bool emitCompareObjectUndefinedNullResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  ObjOperandId objId = reader.objOperandId();\
  return emitCompareObjectUndefinedNullResult(op, objId);\
}\
\
MOZ_MUST_USE bool emitCallPrintString(const char* str);\
MOZ_MUST_USE bool emitCallPrintString(CacheIRReader& reader) {\
  const char* str = reinterpret_cast<char*>(reader.pointer());\
  return emitCallPrintString(str);\
}\
\
MOZ_MUST_USE bool emitBreakpoint();\
MOZ_MUST_USE bool emitBreakpoint(CacheIRReader& reader) {\
  return emitBreakpoint();\
}\
\
MOZ_MUST_USE bool emitWrapResult();\
MOZ_MUST_USE bool emitWrapResult(CacheIRReader& reader) {\
  return emitWrapResult();\
}\


#define CACHE_IR_COMPILER_UNSHARED_GENERATED \
MOZ_MUST_USE bool emitGuardShape(ObjOperandId objId, uint32_t shapeOffset);\
MOZ_MUST_USE bool emitGuardShape(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t shapeOffset = reader.stubOffset();\
  return emitGuardShape(objId, shapeOffset);\
}\
\
MOZ_MUST_USE bool emitGuardGroup(ObjOperandId objId, uint32_t groupOffset);\
MOZ_MUST_USE bool emitGuardGroup(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t groupOffset = reader.stubOffset();\
  return emitGuardGroup(objId, groupOffset);\
}\
\
MOZ_MUST_USE bool emitGuardProto(ObjOperandId objId, uint32_t protoOffset);\
MOZ_MUST_USE bool emitGuardProto(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t protoOffset = reader.stubOffset();\
  return emitGuardProto(objId, protoOffset);\
}\
\
MOZ_MUST_USE bool emitGuardAnyClass(ObjOperandId objId, uint32_t claspOffset);\
MOZ_MUST_USE bool emitGuardAnyClass(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t claspOffset = reader.stubOffset();\
  return emitGuardAnyClass(objId, claspOffset);\
}\
\
MOZ_MUST_USE bool emitGuardCompartment(ObjOperandId objId, uint32_t globalOffset, uint32_t compartmentOffset);\
MOZ_MUST_USE bool emitGuardCompartment(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t globalOffset = reader.stubOffset();\
  uint32_t compartmentOffset = reader.stubOffset();\
  return emitGuardCompartment(objId, globalOffset, compartmentOffset);\
}\
\
MOZ_MUST_USE bool emitGuardHasProxyHandler(ObjOperandId objId, uint32_t handlerOffset);\
MOZ_MUST_USE bool emitGuardHasProxyHandler(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t handlerOffset = reader.stubOffset();\
  return emitGuardHasProxyHandler(objId, handlerOffset);\
}\
\
MOZ_MUST_USE bool emitGuardSpecificObject(ObjOperandId objId, uint32_t expectedOffset);\
MOZ_MUST_USE bool emitGuardSpecificObject(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t expectedOffset = reader.stubOffset();\
  return emitGuardSpecificObject(objId, expectedOffset);\
}\
\
MOZ_MUST_USE bool emitGuardSpecificFunction(ObjOperandId objId, uint32_t expectedOffset, uint32_t nargsAndFlagsOffset);\
MOZ_MUST_USE bool emitGuardSpecificFunction(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t expectedOffset = reader.stubOffset();\
  uint32_t nargsAndFlagsOffset = reader.stubOffset();\
  return emitGuardSpecificFunction(objId, expectedOffset, nargsAndFlagsOffset);\
}\
\
MOZ_MUST_USE bool emitGuardSpecificAtom(StringOperandId strId, uint32_t expectedOffset);\
MOZ_MUST_USE bool emitGuardSpecificAtom(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  uint32_t expectedOffset = reader.stubOffset();\
  return emitGuardSpecificAtom(strId, expectedOffset);\
}\
\
MOZ_MUST_USE bool emitGuardSpecificSymbol(SymbolOperandId symId, uint32_t expectedOffset);\
MOZ_MUST_USE bool emitGuardSpecificSymbol(CacheIRReader& reader) {\
  SymbolOperandId symId = reader.symbolOperandId();\
  uint32_t expectedOffset = reader.stubOffset();\
  return emitGuardSpecificSymbol(symId, expectedOffset);\
}\
\
MOZ_MUST_USE bool emitGuardFrameHasNoArgumentsObject();\
MOZ_MUST_USE bool emitGuardFrameHasNoArgumentsObject(CacheIRReader& reader) {\
  return emitGuardFrameHasNoArgumentsObject();\
}\
\
MOZ_MUST_USE bool emitGuardAndGetIterator(ObjOperandId objId, uint32_t iterOffset, uint32_t enumeratorsAddrOffset, ObjOperandId resultId);\
MOZ_MUST_USE bool emitGuardAndGetIterator(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t iterOffset = reader.stubOffset();\
  uint32_t enumeratorsAddrOffset = reader.stubOffset();\
  ObjOperandId resultId = reader.objOperandId();\
  return emitGuardAndGetIterator(objId, iterOffset, enumeratorsAddrOffset, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardHasGetterSetter(ObjOperandId objId, uint32_t shapeOffset);\
MOZ_MUST_USE bool emitGuardHasGetterSetter(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t shapeOffset = reader.stubOffset();\
  return emitGuardHasGetterSetter(objId, shapeOffset);\
}\
\
MOZ_MUST_USE bool emitGuardFunApply(Int32OperandId argcId, CallFlags flags);\
MOZ_MUST_USE bool emitGuardFunApply(CacheIRReader& reader) {\
  Int32OperandId argcId = reader.int32OperandId();\
  CallFlags flags = reader.callFlags();\
  return emitGuardFunApply(argcId, flags);\
}\
\
MOZ_MUST_USE bool emitLoadArgumentFixedSlot(ValOperandId resultId, uint8_t slotIndex);\
MOZ_MUST_USE bool emitLoadArgumentFixedSlot(CacheIRReader& reader) {\
  ValOperandId resultId = reader.valOperandId();\
  uint8_t slotIndex = reader.readByte();\
  return emitLoadArgumentFixedSlot(resultId, slotIndex);\
}\
\
MOZ_MUST_USE bool emitLoadArgumentDynamicSlot(ValOperandId resultId, Int32OperandId argcId, uint8_t slotIndex);\
MOZ_MUST_USE bool emitLoadArgumentDynamicSlot(CacheIRReader& reader) {\
  ValOperandId resultId = reader.valOperandId();\
  Int32OperandId argcId = reader.int32OperandId();\
  uint8_t slotIndex = reader.readByte();\
  return emitLoadArgumentDynamicSlot(resultId, argcId, slotIndex);\
}\
\
MOZ_MUST_USE bool emitMegamorphicSetElement(ObjOperandId objId, ValOperandId idId, ValOperandId rhsId, bool strict);\
MOZ_MUST_USE bool emitMegamorphicSetElement(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ValOperandId idId = reader.valOperandId();\
  ValOperandId rhsId = reader.valOperandId();\
  bool strict = reader.readBool();\
  return emitMegamorphicSetElement(objId, idId, rhsId, strict);\
}\
\
MOZ_MUST_USE bool emitLoadDOMExpandoValueGuardGeneration(ObjOperandId objId, uint32_t expandoAndGenerationOffset, uint32_t generationOffset, ValOperandId resultId);\
MOZ_MUST_USE bool emitLoadDOMExpandoValueGuardGeneration(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t expandoAndGenerationOffset = reader.stubOffset();\
  uint32_t generationOffset = reader.stubOffset();\
  ValOperandId resultId = reader.valOperandId();\
  return emitLoadDOMExpandoValueGuardGeneration(objId, expandoAndGenerationOffset, generationOffset, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardDOMExpandoMissingOrGuardShape(ValOperandId expandoId, uint32_t shapeOffset);\
MOZ_MUST_USE bool emitGuardDOMExpandoMissingOrGuardShape(CacheIRReader& reader) {\
  ValOperandId expandoId = reader.valOperandId();\
  uint32_t shapeOffset = reader.stubOffset();\
  return emitGuardDOMExpandoMissingOrGuardShape(expandoId, shapeOffset);\
}\
\
MOZ_MUST_USE bool emitStoreFixedSlot(ObjOperandId objId, uint32_t offsetOffset, ValOperandId rhsId);\
MOZ_MUST_USE bool emitStoreFixedSlot(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitStoreFixedSlot(objId, offsetOffset, rhsId);\
}\
\
MOZ_MUST_USE bool emitStoreDynamicSlot(ObjOperandId objId, uint32_t offsetOffset, ValOperandId rhsId);\
MOZ_MUST_USE bool emitStoreDynamicSlot(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitStoreDynamicSlot(objId, offsetOffset, rhsId);\
}\
\
MOZ_MUST_USE bool emitAddAndStoreFixedSlot(ObjOperandId objId, uint32_t offsetOffset, ValOperandId rhsId, bool changeGroup, uint32_t newGroupOffset, uint32_t newShapeOffset);\
MOZ_MUST_USE bool emitAddAndStoreFixedSlot(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  bool changeGroup = reader.readBool();\
  uint32_t newGroupOffset = reader.stubOffset();\
  uint32_t newShapeOffset = reader.stubOffset();\
  return emitAddAndStoreFixedSlot(objId, offsetOffset, rhsId, changeGroup, newGroupOffset, newShapeOffset);\
}\
\
MOZ_MUST_USE bool emitAddAndStoreDynamicSlot(ObjOperandId objId, uint32_t offsetOffset, ValOperandId rhsId, bool changeGroup, uint32_t newGroupOffset, uint32_t newShapeOffset);\
MOZ_MUST_USE bool emitAddAndStoreDynamicSlot(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  bool changeGroup = reader.readBool();\
  uint32_t newGroupOffset = reader.stubOffset();\
  uint32_t newShapeOffset = reader.stubOffset();\
  return emitAddAndStoreDynamicSlot(objId, offsetOffset, rhsId, changeGroup, newGroupOffset, newShapeOffset);\
}\
\
MOZ_MUST_USE bool emitAllocateAndStoreDynamicSlot(ObjOperandId objId, uint32_t offsetOffset, ValOperandId rhsId, bool changeGroup, uint32_t newGroupOffset, uint32_t newShapeOffset, uint32_t numNewSlotsOffset);\
MOZ_MUST_USE bool emitAllocateAndStoreDynamicSlot(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  bool changeGroup = reader.readBool();\
  uint32_t newGroupOffset = reader.stubOffset();\
  uint32_t newShapeOffset = reader.stubOffset();\
  uint32_t numNewSlotsOffset = reader.stubOffset();\
  return emitAllocateAndStoreDynamicSlot(objId, offsetOffset, rhsId, changeGroup, newGroupOffset, newShapeOffset, numNewSlotsOffset);\
}\
\
MOZ_MUST_USE bool emitStoreTypedObjectReferenceProperty(ObjOperandId objId, uint32_t offsetOffset, TypedThingLayout layout, ReferenceType type, ValOperandId rhsId);\
MOZ_MUST_USE bool emitStoreTypedObjectReferenceProperty(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  TypedThingLayout layout = reader.typedThingLayout();\
  ReferenceType type = reader.referenceTypeDescrType();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitStoreTypedObjectReferenceProperty(objId, offsetOffset, layout, type, rhsId);\
}\
\
MOZ_MUST_USE bool emitStoreDenseElement(ObjOperandId objId, Int32OperandId indexId, ValOperandId rhsId);\
MOZ_MUST_USE bool emitStoreDenseElement(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitStoreDenseElement(objId, indexId, rhsId);\
}\
\
MOZ_MUST_USE bool emitStoreDenseElementHole(ObjOperandId objId, Int32OperandId indexId, ValOperandId rhsId, bool handleAdd);\
MOZ_MUST_USE bool emitStoreDenseElementHole(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  ValOperandId rhsId = reader.valOperandId();\
  bool handleAdd = reader.readBool();\
  return emitStoreDenseElementHole(objId, indexId, rhsId, handleAdd);\
}\
\
MOZ_MUST_USE bool emitArrayPush(ObjOperandId objId, ValOperandId rhsId);\
MOZ_MUST_USE bool emitArrayPush(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitArrayPush(objId, rhsId);\
}\
\
MOZ_MUST_USE bool emitIsArrayResult(ValOperandId inputId);\
MOZ_MUST_USE bool emitIsArrayResult(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitIsArrayResult(inputId);\
}\
\
MOZ_MUST_USE bool emitCallNativeSetter(ObjOperandId objId, uint32_t setterOffset, ValOperandId rhsId);\
MOZ_MUST_USE bool emitCallNativeSetter(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t setterOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitCallNativeSetter(objId, setterOffset, rhsId);\
}\
\
MOZ_MUST_USE bool emitCallScriptedSetter(ObjOperandId objId, uint32_t setterOffset, ValOperandId rhsId, bool sameRealm);\
MOZ_MUST_USE bool emitCallScriptedSetter(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t setterOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  bool sameRealm = reader.readBool();\
  return emitCallScriptedSetter(objId, setterOffset, rhsId, sameRealm);\
}\
\
MOZ_MUST_USE bool emitCallSetArrayLength(ObjOperandId objId, bool strict, ValOperandId rhsId);\
MOZ_MUST_USE bool emitCallSetArrayLength(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  bool strict = reader.readBool();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitCallSetArrayLength(objId, strict, rhsId);\
}\
\
MOZ_MUST_USE bool emitCallProxySet(ObjOperandId objId, uint32_t idOffset, ValOperandId rhsId, bool strict);\
MOZ_MUST_USE bool emitCallProxySet(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t idOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  bool strict = reader.readBool();\
  return emitCallProxySet(objId, idOffset, rhsId, strict);\
}\
\
MOZ_MUST_USE bool emitCallProxySetByValue(ObjOperandId objId, ValOperandId idId, ValOperandId rhsId, bool strict);\
MOZ_MUST_USE bool emitCallProxySetByValue(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ValOperandId idId = reader.valOperandId();\
  ValOperandId rhsId = reader.valOperandId();\
  bool strict = reader.readBool();\
  return emitCallProxySetByValue(objId, idId, rhsId, strict);\
}\
\
MOZ_MUST_USE bool emitCallAddOrUpdateSparseElementHelper(ObjOperandId objId, Int32OperandId idId, ValOperandId rhsId, bool strict);\
MOZ_MUST_USE bool emitCallAddOrUpdateSparseElementHelper(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId idId = reader.int32OperandId();\
  ValOperandId rhsId = reader.valOperandId();\
  bool strict = reader.readBool();\
  return emitCallAddOrUpdateSparseElementHelper(objId, idId, rhsId, strict);\
}\
\
MOZ_MUST_USE bool emitCallScriptedFunction(ObjOperandId calleeId, Int32OperandId argcId, CallFlags flags);\
MOZ_MUST_USE bool emitCallScriptedFunction(CacheIRReader& reader) {\
  ObjOperandId calleeId = reader.objOperandId();\
  Int32OperandId argcId = reader.int32OperandId();\
  CallFlags flags = reader.callFlags();\
  return emitCallScriptedFunction(calleeId, argcId, flags);\
}\
\
MOZ_MUST_USE bool emitCallNativeFunction(ObjOperandId calleeId, Int32OperandId argcId, CallFlags flags, bool ignoresReturnValue);\
MOZ_MUST_USE bool emitCallNativeFunction(CacheIRReader& reader) {\
  ObjOperandId calleeId = reader.objOperandId();\
  Int32OperandId argcId = reader.int32OperandId();\
  CallFlags flags = reader.callFlags();\
  bool ignoresReturnValue = reader.readBool();\
  return emitCallNativeFunction(calleeId, argcId, flags, ignoresReturnValue);\
}\
\
MOZ_MUST_USE bool emitCallClassHook(ObjOperandId calleeId, Int32OperandId argcId, CallFlags flags, uint32_t targetOffset);\
MOZ_MUST_USE bool emitCallClassHook(CacheIRReader& reader) {\
  ObjOperandId calleeId = reader.objOperandId();\
  Int32OperandId argcId = reader.int32OperandId();\
  CallFlags flags = reader.callFlags();\
  uint32_t targetOffset = reader.stubOffset();\
  return emitCallClassHook(calleeId, argcId, flags, targetOffset);\
}\
\
MOZ_MUST_USE bool emitLoadFixedSlotResult(ObjOperandId objId, uint32_t offsetOffset);\
MOZ_MUST_USE bool emitLoadFixedSlotResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  return emitLoadFixedSlotResult(objId, offsetOffset);\
}\
\
MOZ_MUST_USE bool emitLoadDynamicSlotResult(ObjOperandId objId, uint32_t offsetOffset);\
MOZ_MUST_USE bool emitLoadDynamicSlotResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  return emitLoadDynamicSlotResult(objId, offsetOffset);\
}\
\
MOZ_MUST_USE bool emitLoadFrameCalleeResult();\
MOZ_MUST_USE bool emitLoadFrameCalleeResult(CacheIRReader& reader) {\
  return emitLoadFrameCalleeResult();\
}\
\
MOZ_MUST_USE bool emitLoadFrameNumActualArgsResult();\
MOZ_MUST_USE bool emitLoadFrameNumActualArgsResult(CacheIRReader& reader) {\
  return emitLoadFrameNumActualArgsResult();\
}\
\
MOZ_MUST_USE bool emitLoadFrameArgumentResult(Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadFrameArgumentResult(CacheIRReader& reader) {\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadFrameArgumentResult(indexId);\
}\
\
MOZ_MUST_USE bool emitLoadEnvironmentFixedSlotResult(ObjOperandId objId, uint32_t offsetOffset);\
MOZ_MUST_USE bool emitLoadEnvironmentFixedSlotResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  return emitLoadEnvironmentFixedSlotResult(objId, offsetOffset);\
}\
\
MOZ_MUST_USE bool emitLoadEnvironmentDynamicSlotResult(ObjOperandId objId, uint32_t offsetOffset);\
MOZ_MUST_USE bool emitLoadEnvironmentDynamicSlotResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  return emitLoadEnvironmentDynamicSlotResult(objId, offsetOffset);\
}\
\
MOZ_MUST_USE bool emitCallScriptedGetterResult(ObjOperandId objId, uint32_t getterOffset, bool sameRealm);\
MOZ_MUST_USE bool emitCallScriptedGetterResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t getterOffset = reader.stubOffset();\
  bool sameRealm = reader.readBool();\
  return emitCallScriptedGetterResult(objId, getterOffset, sameRealm);\
}\
\
MOZ_MUST_USE bool emitCallScriptedGetterByValueResult(ValOperandId valId, uint32_t getterOffset, bool sameRealm);\
MOZ_MUST_USE bool emitCallScriptedGetterByValueResult(CacheIRReader& reader) {\
  ValOperandId valId = reader.valOperandId();\
  uint32_t getterOffset = reader.stubOffset();\
  bool sameRealm = reader.readBool();\
  return emitCallScriptedGetterByValueResult(valId, getterOffset, sameRealm);\
}\
\
MOZ_MUST_USE bool emitCallNativeGetterResult(ObjOperandId objId, uint32_t getterOffset);\
MOZ_MUST_USE bool emitCallNativeGetterResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t getterOffset = reader.stubOffset();\
  return emitCallNativeGetterResult(objId, getterOffset);\
}\
\
MOZ_MUST_USE bool emitCallNativeGetterByValueResult(ValOperandId valId, uint32_t getterOffset);\
MOZ_MUST_USE bool emitCallNativeGetterByValueResult(CacheIRReader& reader) {\
  ValOperandId valId = reader.valOperandId();\
  uint32_t getterOffset = reader.stubOffset();\
  return emitCallNativeGetterByValueResult(valId, getterOffset);\
}\
\
MOZ_MUST_USE bool emitCallProxyGetResult(ObjOperandId objId, uint32_t idOffset);\
MOZ_MUST_USE bool emitCallProxyGetResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t idOffset = reader.stubOffset();\
  return emitCallProxyGetResult(objId, idOffset);\
}\
\
MOZ_MUST_USE bool emitLoadConstantStringResult(uint32_t strOffset);\
MOZ_MUST_USE bool emitLoadConstantStringResult(CacheIRReader& reader) {\
  uint32_t strOffset = reader.stubOffset();\
  return emitLoadConstantStringResult(strOffset);\
}\
\
MOZ_MUST_USE bool emitLoadValueResult(uint32_t valOffset);\
MOZ_MUST_USE bool emitLoadValueResult(CacheIRReader& reader) {\
  uint32_t valOffset = reader.stubOffset();\
  return emitLoadValueResult(valOffset);\
}\
\
MOZ_MUST_USE bool emitCallStringObjectConcatResult(ValOperandId lhsId, ValOperandId rhsId);\
MOZ_MUST_USE bool emitCallStringObjectConcatResult(CacheIRReader& reader) {\
  ValOperandId lhsId = reader.valOperandId();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitCallStringObjectConcatResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareStringResult(JSOp op, StringOperandId lhsId, StringOperandId rhsId);\
MOZ_MUST_USE bool emitCompareStringResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  StringOperandId lhsId = reader.stringOperandId();\
  StringOperandId rhsId = reader.stringOperandId();\
  return emitCompareStringResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitTypeMonitorResult();\
MOZ_MUST_USE bool emitTypeMonitorResult(CacheIRReader& reader) {\
  return emitTypeMonitorResult();\
}\
\
MOZ_MUST_USE bool emitReturnFromIC();\
MOZ_MUST_USE bool emitReturnFromIC(CacheIRReader& reader) {\
  return emitReturnFromIC();\
}\


#define CACHE_IR_TRANSPILER_GENERATED \
MOZ_MUST_USE bool emitGuardToObject(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardToObject(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardToObject(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardIsNullOrUndefined(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardIsNullOrUndefined(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardIsNullOrUndefined(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardIsNull(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardIsNull(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardIsNull(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardIsUndefined(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardIsUndefined(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardIsUndefined(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardToBoolean(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToBoolean(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToBoolean(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardToString(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardToString(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardToString(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardIsNumber(ValOperandId inputId);\
MOZ_MUST_USE bool emitGuardIsNumber(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitGuardIsNumber(inputId);\
}\
\
MOZ_MUST_USE bool emitGuardToInt32(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToInt32(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToInt32(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardToInt32Index(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToInt32Index(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToInt32Index(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardToTypedArrayIndex(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToTypedArrayIndex(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToTypedArrayIndex(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardToInt32ModUint32(ValOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitGuardToInt32ModUint32(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitGuardToInt32ModUint32(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitGuardNonDoubleType(ValOperandId inputId, ValueType type);\
MOZ_MUST_USE bool emitGuardNonDoubleType(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  ValueType type = reader.valueType();\
  return emitGuardNonDoubleType(inputId, type);\
}\
\
MOZ_MUST_USE bool emitGuardShape(ObjOperandId objId, uint32_t shapeOffset);\
MOZ_MUST_USE bool emitGuardShape(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t shapeOffset = reader.stubOffset();\
  return emitGuardShape(objId, shapeOffset);\
}\
\
MOZ_MUST_USE bool emitGuardClass(ObjOperandId objId, GuardClassKind kind);\
MOZ_MUST_USE bool emitGuardClass(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  GuardClassKind kind = reader.guardClassKind();\
  return emitGuardClass(objId, kind);\
}\
\
MOZ_MUST_USE bool emitGuardSpecificObject(ObjOperandId objId, uint32_t expectedOffset);\
MOZ_MUST_USE bool emitGuardSpecificObject(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t expectedOffset = reader.stubOffset();\
  return emitGuardSpecificObject(objId, expectedOffset);\
}\
\
MOZ_MUST_USE bool emitGuardSpecificFunction(ObjOperandId objId, uint32_t expectedOffset, uint32_t nargsAndFlagsOffset);\
MOZ_MUST_USE bool emitGuardSpecificFunction(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t expectedOffset = reader.stubOffset();\
  uint32_t nargsAndFlagsOffset = reader.stubOffset();\
  return emitGuardSpecificFunction(objId, expectedOffset, nargsAndFlagsOffset);\
}\
\
MOZ_MUST_USE bool emitGuardSpecificAtom(StringOperandId strId, uint32_t expectedOffset);\
MOZ_MUST_USE bool emitGuardSpecificAtom(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  uint32_t expectedOffset = reader.stubOffset();\
  return emitGuardSpecificAtom(strId, expectedOffset);\
}\
\
MOZ_MUST_USE bool emitLoadObject(ObjOperandId resultId, uint32_t objOffset);\
MOZ_MUST_USE bool emitLoadObject(CacheIRReader& reader) {\
  ObjOperandId resultId = reader.objOperandId();\
  uint32_t objOffset = reader.stubOffset();\
  return emitLoadObject(resultId, objOffset);\
}\
\
MOZ_MUST_USE bool emitLoadProto(ObjOperandId objId, ObjOperandId resultId);\
MOZ_MUST_USE bool emitLoadProto(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ObjOperandId resultId = reader.objOperandId();\
  return emitLoadProto(objId, resultId);\
}\
\
MOZ_MUST_USE bool emitLoadEnclosingEnvironment(ObjOperandId objId, ObjOperandId resultId);\
MOZ_MUST_USE bool emitLoadEnclosingEnvironment(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ObjOperandId resultId = reader.objOperandId();\
  return emitLoadEnclosingEnvironment(objId, resultId);\
}\
\
MOZ_MUST_USE bool emitLoadArgumentFixedSlot(ValOperandId resultId, uint8_t slotIndex);\
MOZ_MUST_USE bool emitLoadArgumentFixedSlot(CacheIRReader& reader) {\
  ValOperandId resultId = reader.valOperandId();\
  uint8_t slotIndex = reader.readByte();\
  return emitLoadArgumentFixedSlot(resultId, slotIndex);\
}\
\
MOZ_MUST_USE bool emitLoadArgumentDynamicSlot(ValOperandId resultId, Int32OperandId argcId, uint8_t slotIndex);\
MOZ_MUST_USE bool emitLoadArgumentDynamicSlot(CacheIRReader& reader) {\
  ValOperandId resultId = reader.valOperandId();\
  Int32OperandId argcId = reader.int32OperandId();\
  uint8_t slotIndex = reader.readByte();\
  return emitLoadArgumentDynamicSlot(resultId, argcId, slotIndex);\
}\
\
MOZ_MUST_USE bool emitTruncateDoubleToUInt32(NumberOperandId inputId, Int32OperandId resultId);\
MOZ_MUST_USE bool emitTruncateDoubleToUInt32(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  Int32OperandId resultId = reader.int32OperandId();\
  return emitTruncateDoubleToUInt32(inputId, resultId);\
}\
\
MOZ_MUST_USE bool emitStoreFixedSlot(ObjOperandId objId, uint32_t offsetOffset, ValOperandId rhsId);\
MOZ_MUST_USE bool emitStoreFixedSlot(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitStoreFixedSlot(objId, offsetOffset, rhsId);\
}\
\
MOZ_MUST_USE bool emitStoreDynamicSlot(ObjOperandId objId, uint32_t offsetOffset, ValOperandId rhsId);\
MOZ_MUST_USE bool emitStoreDynamicSlot(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitStoreDynamicSlot(objId, offsetOffset, rhsId);\
}\
\
MOZ_MUST_USE bool emitStoreDenseElement(ObjOperandId objId, Int32OperandId indexId, ValOperandId rhsId);\
MOZ_MUST_USE bool emitStoreDenseElement(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitStoreDenseElement(objId, indexId, rhsId);\
}\
\
MOZ_MUST_USE bool emitArrayPush(ObjOperandId objId, ValOperandId rhsId);\
MOZ_MUST_USE bool emitArrayPush(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  ValOperandId rhsId = reader.valOperandId();\
  return emitArrayPush(objId, rhsId);\
}\
\
MOZ_MUST_USE bool emitIsArrayResult(ValOperandId inputId);\
MOZ_MUST_USE bool emitIsArrayResult(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitIsArrayResult(inputId);\
}\
\
MOZ_MUST_USE bool emitIsObjectResult(ValOperandId inputId);\
MOZ_MUST_USE bool emitIsObjectResult(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitIsObjectResult(inputId);\
}\
\
MOZ_MUST_USE bool emitIsCallableResult(ValOperandId inputId);\
MOZ_MUST_USE bool emitIsCallableResult(CacheIRReader& reader) {\
  ValOperandId inputId = reader.valOperandId();\
  return emitIsCallableResult(inputId);\
}\
\
MOZ_MUST_USE bool emitIsConstructorResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitIsConstructorResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitIsConstructorResult(objId);\
}\
\
MOZ_MUST_USE bool emitMathAbsInt32Result(Int32OperandId inputId);\
MOZ_MUST_USE bool emitMathAbsInt32Result(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  return emitMathAbsInt32Result(inputId);\
}\
\
MOZ_MUST_USE bool emitMathAbsNumberResult(NumberOperandId inputId);\
MOZ_MUST_USE bool emitMathAbsNumberResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitMathAbsNumberResult(inputId);\
}\
\
MOZ_MUST_USE bool emitMathSqrtNumberResult(NumberOperandId inputId);\
MOZ_MUST_USE bool emitMathSqrtNumberResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitMathSqrtNumberResult(inputId);\
}\
\
MOZ_MUST_USE bool emitMathFloorToInt32Result(NumberOperandId inputId);\
MOZ_MUST_USE bool emitMathFloorToInt32Result(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitMathFloorToInt32Result(inputId);\
}\
\
MOZ_MUST_USE bool emitMathCeilToInt32Result(NumberOperandId inputId);\
MOZ_MUST_USE bool emitMathCeilToInt32Result(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitMathCeilToInt32Result(inputId);\
}\
\
MOZ_MUST_USE bool emitMathRoundToInt32Result(NumberOperandId inputId);\
MOZ_MUST_USE bool emitMathRoundToInt32Result(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitMathRoundToInt32Result(inputId);\
}\
\
MOZ_MUST_USE bool emitMathFunctionNumberResult(NumberOperandId inputId, UnaryMathFunction fun);\
MOZ_MUST_USE bool emitMathFunctionNumberResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  UnaryMathFunction fun = reader.unaryMathFunction();\
  return emitMathFunctionNumberResult(inputId, fun);\
}\
\
MOZ_MUST_USE bool emitStoreTypedArrayElement(ObjOperandId objId, Scalar::Type elementType, Int32OperandId indexId, uint32_t rhsId, bool handleOOB);\
MOZ_MUST_USE bool emitStoreTypedArrayElement(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Scalar::Type elementType = reader.scalarType();\
  Int32OperandId indexId = reader.int32OperandId();\
  uint32_t rhsId = reader.rawOperandId();\
  bool handleOOB = reader.readBool();\
  return emitStoreTypedArrayElement(objId, elementType, indexId, rhsId, handleOOB);\
}\
\
MOZ_MUST_USE bool emitCallScriptedFunction(ObjOperandId calleeId, Int32OperandId argcId, CallFlags flags);\
MOZ_MUST_USE bool emitCallScriptedFunction(CacheIRReader& reader) {\
  ObjOperandId calleeId = reader.objOperandId();\
  Int32OperandId argcId = reader.int32OperandId();\
  CallFlags flags = reader.callFlags();\
  return emitCallScriptedFunction(calleeId, argcId, flags);\
}\
\
MOZ_MUST_USE bool emitCallNativeFunction(ObjOperandId calleeId, Int32OperandId argcId, CallFlags flags, bool ignoresReturnValue);\
MOZ_MUST_USE bool emitCallNativeFunction(CacheIRReader& reader) {\
  ObjOperandId calleeId = reader.objOperandId();\
  Int32OperandId argcId = reader.int32OperandId();\
  CallFlags flags = reader.callFlags();\
  bool ignoresReturnValue = reader.readBool();\
  return emitCallNativeFunction(calleeId, argcId, flags, ignoresReturnValue);\
}\
\
MOZ_MUST_USE bool emitMetaTwoByte(MetaTwoByteKind kind, uint32_t functionObjectOffset, uint32_t templateObjectOffset);\
MOZ_MUST_USE bool emitMetaTwoByte(CacheIRReader& reader) {\
  MetaTwoByteKind kind = reader.metaKind<MetaTwoByteKind>();\
  uint32_t functionObjectOffset = reader.stubOffset();\
  uint32_t templateObjectOffset = reader.stubOffset();\
  return emitMetaTwoByte(kind, functionObjectOffset, templateObjectOffset);\
}\
\
MOZ_MUST_USE bool emitLoadFixedSlotResult(ObjOperandId objId, uint32_t offsetOffset);\
MOZ_MUST_USE bool emitLoadFixedSlotResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  return emitLoadFixedSlotResult(objId, offsetOffset);\
}\
\
MOZ_MUST_USE bool emitLoadDynamicSlotResult(ObjOperandId objId, uint32_t offsetOffset);\
MOZ_MUST_USE bool emitLoadDynamicSlotResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  return emitLoadDynamicSlotResult(objId, offsetOffset);\
}\
\
MOZ_MUST_USE bool emitLoadDenseElementResult(ObjOperandId objId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadDenseElementResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadDenseElementResult(objId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadTypedArrayElementResult(ObjOperandId objId, Int32OperandId indexId, Scalar::Type elementType, bool handleOOB);\
MOZ_MUST_USE bool emitLoadTypedArrayElementResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  Scalar::Type elementType = reader.scalarType();\
  bool handleOOB = reader.readBool();\
  return emitLoadTypedArrayElementResult(objId, indexId, elementType, handleOOB);\
}\
\
MOZ_MUST_USE bool emitLoadInt32ArrayLengthResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitLoadInt32ArrayLengthResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitLoadInt32ArrayLengthResult(objId);\
}\
\
MOZ_MUST_USE bool emitLoadTypedArrayLengthResult(ObjOperandId objId, uint32_t getterOffset);\
MOZ_MUST_USE bool emitLoadTypedArrayLengthResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t getterOffset = reader.stubOffset();\
  return emitLoadTypedArrayLengthResult(objId, getterOffset);\
}\
\
MOZ_MUST_USE bool emitLoadStringCharResult(StringOperandId strId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadStringCharResult(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadStringCharResult(strId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadStringCharCodeResult(StringOperandId strId, Int32OperandId indexId);\
MOZ_MUST_USE bool emitLoadStringCharCodeResult(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  Int32OperandId indexId = reader.int32OperandId();\
  return emitLoadStringCharCodeResult(strId, indexId);\
}\
\
MOZ_MUST_USE bool emitLoadStringLengthResult(StringOperandId strId);\
MOZ_MUST_USE bool emitLoadStringLengthResult(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  return emitLoadStringLengthResult(strId);\
}\
\
MOZ_MUST_USE bool emitLoadEnvironmentFixedSlotResult(ObjOperandId objId, uint32_t offsetOffset);\
MOZ_MUST_USE bool emitLoadEnvironmentFixedSlotResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  return emitLoadEnvironmentFixedSlotResult(objId, offsetOffset);\
}\
\
MOZ_MUST_USE bool emitLoadEnvironmentDynamicSlotResult(ObjOperandId objId, uint32_t offsetOffset);\
MOZ_MUST_USE bool emitLoadEnvironmentDynamicSlotResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  uint32_t offsetOffset = reader.stubOffset();\
  return emitLoadEnvironmentDynamicSlotResult(objId, offsetOffset);\
}\
\
MOZ_MUST_USE bool emitLoadObjectResult(ObjOperandId objId);\
MOZ_MUST_USE bool emitLoadObjectResult(CacheIRReader& reader) {\
  ObjOperandId objId = reader.objOperandId();\
  return emitLoadObjectResult(objId);\
}\
\
MOZ_MUST_USE bool emitLoadStringResult(StringOperandId strId);\
MOZ_MUST_USE bool emitLoadStringResult(CacheIRReader& reader) {\
  StringOperandId strId = reader.stringOperandId();\
  return emitLoadStringResult(strId);\
}\
\
MOZ_MUST_USE bool emitLoadInt32Result(Int32OperandId valId);\
MOZ_MUST_USE bool emitLoadInt32Result(CacheIRReader& reader) {\
  Int32OperandId valId = reader.int32OperandId();\
  return emitLoadInt32Result(valId);\
}\
\
MOZ_MUST_USE bool emitLoadBooleanResult(bool val);\
MOZ_MUST_USE bool emitLoadBooleanResult(CacheIRReader& reader) {\
  bool val = reader.readBool();\
  return emitLoadBooleanResult(val);\
}\
\
MOZ_MUST_USE bool emitDoubleAddResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoubleAddResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoubleAddResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitDoubleSubResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoubleSubResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoubleSubResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitDoubleMulResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoubleMulResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoubleMulResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitDoubleDivResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoubleDivResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoubleDivResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitDoubleModResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoubleModResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoubleModResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitDoublePowResult(NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitDoublePowResult(CacheIRReader& reader) {\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitDoublePowResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32AddResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32AddResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32AddResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32SubResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32SubResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32SubResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32MulResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32MulResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32MulResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32DivResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32DivResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32DivResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32ModResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32ModResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32ModResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32BitOrResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32BitOrResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32BitOrResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32BitXorResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32BitXorResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32BitXorResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32BitAndResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32BitAndResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32BitAndResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32LeftShiftResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32LeftShiftResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32LeftShiftResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32RightShiftResult(Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitInt32RightShiftResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitInt32RightShiftResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitInt32URightShiftResult(Int32OperandId lhsId, Int32OperandId rhsId, bool allowDouble);\
MOZ_MUST_USE bool emitInt32URightShiftResult(CacheIRReader& reader) {\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  bool allowDouble = reader.readBool();\
  return emitInt32URightShiftResult(lhsId, rhsId, allowDouble);\
}\
\
MOZ_MUST_USE bool emitInt32NotResult(Int32OperandId inputId);\
MOZ_MUST_USE bool emitInt32NotResult(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  return emitInt32NotResult(inputId);\
}\
\
MOZ_MUST_USE bool emitInt32NegationResult(Int32OperandId inputId);\
MOZ_MUST_USE bool emitInt32NegationResult(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  return emitInt32NegationResult(inputId);\
}\
\
MOZ_MUST_USE bool emitDoubleNegationResult(NumberOperandId inputId);\
MOZ_MUST_USE bool emitDoubleNegationResult(CacheIRReader& reader) {\
  NumberOperandId inputId = reader.numberOperandId();\
  return emitDoubleNegationResult(inputId);\
}\
\
MOZ_MUST_USE bool emitInt32IncResult(Int32OperandId inputId);\
MOZ_MUST_USE bool emitInt32IncResult(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  return emitInt32IncResult(inputId);\
}\
\
MOZ_MUST_USE bool emitInt32DecResult(Int32OperandId inputId);\
MOZ_MUST_USE bool emitInt32DecResult(CacheIRReader& reader) {\
  Int32OperandId inputId = reader.int32OperandId();\
  return emitInt32DecResult(inputId);\
}\
\
MOZ_MUST_USE bool emitCallStringConcatResult(StringOperandId lhsId, StringOperandId rhsId);\
MOZ_MUST_USE bool emitCallStringConcatResult(CacheIRReader& reader) {\
  StringOperandId lhsId = reader.stringOperandId();\
  StringOperandId rhsId = reader.stringOperandId();\
  return emitCallStringConcatResult(lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareStringResult(JSOp op, StringOperandId lhsId, StringOperandId rhsId);\
MOZ_MUST_USE bool emitCompareStringResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  StringOperandId lhsId = reader.stringOperandId();\
  StringOperandId rhsId = reader.stringOperandId();\
  return emitCompareStringResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareObjectResult(JSOp op, ObjOperandId lhsId, ObjOperandId rhsId);\
MOZ_MUST_USE bool emitCompareObjectResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  ObjOperandId lhsId = reader.objOperandId();\
  ObjOperandId rhsId = reader.objOperandId();\
  return emitCompareObjectResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareInt32Result(JSOp op, Int32OperandId lhsId, Int32OperandId rhsId);\
MOZ_MUST_USE bool emitCompareInt32Result(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  Int32OperandId lhsId = reader.int32OperandId();\
  Int32OperandId rhsId = reader.int32OperandId();\
  return emitCompareInt32Result(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitCompareDoubleResult(JSOp op, NumberOperandId lhsId, NumberOperandId rhsId);\
MOZ_MUST_USE bool emitCompareDoubleResult(CacheIRReader& reader) {\
  JSOp op = reader.jsop();\
  NumberOperandId lhsId = reader.numberOperandId();\
  NumberOperandId rhsId = reader.numberOperandId();\
  return emitCompareDoubleResult(op, lhsId, rhsId);\
}\
\
MOZ_MUST_USE bool emitTypeMonitorResult();\
MOZ_MUST_USE bool emitTypeMonitorResult(CacheIRReader& reader) {\
  return emitTypeMonitorResult();\
}\
\
MOZ_MUST_USE bool emitReturnFromIC();\
MOZ_MUST_USE bool emitReturnFromIC(CacheIRReader& reader) {\
  return emitReturnFromIC();\
}\


#define CACHE_IR_TRANSPILER_OPS(_)\
_(GuardToObject)\
_(GuardIsNullOrUndefined)\
_(GuardIsNull)\
_(GuardIsUndefined)\
_(GuardToBoolean)\
_(GuardToString)\
_(GuardIsNumber)\
_(GuardToInt32)\
_(GuardToInt32Index)\
_(GuardToTypedArrayIndex)\
_(GuardToInt32ModUint32)\
_(GuardNonDoubleType)\
_(GuardShape)\
_(GuardClass)\
_(GuardSpecificObject)\
_(GuardSpecificFunction)\
_(GuardSpecificAtom)\
_(LoadObject)\
_(LoadProto)\
_(LoadEnclosingEnvironment)\
_(LoadArgumentFixedSlot)\
_(LoadArgumentDynamicSlot)\
_(TruncateDoubleToUInt32)\
_(StoreFixedSlot)\
_(StoreDynamicSlot)\
_(StoreDenseElement)\
_(ArrayPush)\
_(IsArrayResult)\
_(IsObjectResult)\
_(IsCallableResult)\
_(IsConstructorResult)\
_(MathAbsInt32Result)\
_(MathAbsNumberResult)\
_(MathSqrtNumberResult)\
_(MathFloorToInt32Result)\
_(MathCeilToInt32Result)\
_(MathRoundToInt32Result)\
_(MathFunctionNumberResult)\
_(StoreTypedArrayElement)\
_(CallScriptedFunction)\
_(CallNativeFunction)\
_(MetaTwoByte)\
_(LoadFixedSlotResult)\
_(LoadDynamicSlotResult)\
_(LoadDenseElementResult)\
_(LoadTypedArrayElementResult)\
_(LoadInt32ArrayLengthResult)\
_(LoadTypedArrayLengthResult)\
_(LoadStringCharResult)\
_(LoadStringCharCodeResult)\
_(LoadStringLengthResult)\
_(LoadEnvironmentFixedSlotResult)\
_(LoadEnvironmentDynamicSlotResult)\
_(LoadObjectResult)\
_(LoadStringResult)\
_(LoadInt32Result)\
_(LoadBooleanResult)\
_(DoubleAddResult)\
_(DoubleSubResult)\
_(DoubleMulResult)\
_(DoubleDivResult)\
_(DoubleModResult)\
_(DoublePowResult)\
_(Int32AddResult)\
_(Int32SubResult)\
_(Int32MulResult)\
_(Int32DivResult)\
_(Int32ModResult)\
_(Int32BitOrResult)\
_(Int32BitXorResult)\
_(Int32BitAndResult)\
_(Int32LeftShiftResult)\
_(Int32RightShiftResult)\
_(Int32URightShiftResult)\
_(Int32NotResult)\
_(Int32NegationResult)\
_(DoubleNegationResult)\
_(Int32IncResult)\
_(Int32DecResult)\
_(CallStringConcatResult)\
_(CompareStringResult)\
_(CompareObjectResult)\
_(CompareInt32Result)\
_(CompareDoubleResult)\
_(TypeMonitorResult)\
_(ReturnFromIC)

#define CACHE_IR_SPEWER_GENERATED \
void spewGuardToObject(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardToObject);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewGuardIsObjectOrNull(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIsObjectOrNull);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewGuardIsNullOrUndefined(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIsNullOrUndefined);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewGuardIsNull(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIsNull);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewGuardIsUndefined(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIsUndefined);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewGuardToBoolean(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardToBoolean);\
  spewOperandId("inputId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardToString(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardToString);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewGuardToSymbol(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardToSymbol);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewGuardToBigInt(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardToBigInt);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewGuardIsNumber(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIsNumber);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewGuardToInt32(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardToInt32);\
  spewOperandId("inputId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardToInt32Index(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardToInt32Index);\
  spewOperandId("inputId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardToTypedArrayIndex(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardToTypedArrayIndex);\
  spewOperandId("inputId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardToInt32ModUint32(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardToInt32ModUint32);\
  spewOperandId("inputId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardToUint8Clamped(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardToUint8Clamped);\
  spewOperandId("inputId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardNonDoubleType(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardNonDoubleType);\
  spewOperandId("inputId", reader.valOperandId());\
  spewArgSeparator();\
  spewValueTypeImm("type", reader.valueType());\
  spewOpEnd();\
}\
\
void spewGuardShape(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardShape);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("shapeOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardGroup(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardGroup);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("groupOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardProto(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardProto);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("protoOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardClass(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardClass);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewGuardClassKindImm("kind", reader.guardClassKind());\
  spewOpEnd();\
}\
\
void spewGuardAnyClass(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardAnyClass);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("claspOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardCompartment(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardCompartment);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("globalOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewField("compartmentOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardIsExtensible(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIsExtensible);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewGuardIsNativeObject(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIsNativeObject);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewGuardIsProxy(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIsProxy);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewGuardHasProxyHandler(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardHasProxyHandler);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("handlerOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardNotDOMProxy(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardNotDOMProxy);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewGuardSpecificObject(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardSpecificObject);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("expectedOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardSpecificFunction(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardSpecificFunction);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("expectedOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewField("nargsAndFlagsOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardSpecificAtom(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardSpecificAtom);\
  spewOperandId("strId", reader.stringOperandId());\
  spewArgSeparator();\
  spewField("expectedOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardSpecificSymbol(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardSpecificSymbol);\
  spewOperandId("symId", reader.symbolOperandId());\
  spewArgSeparator();\
  spewField("expectedOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardSpecificNativeFunction(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardSpecificNativeFunction);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewJSNativeImm("native", reinterpret_cast<JSNative>(reader.pointer()));\
  spewOpEnd();\
}\
\
void spewGuardMagicValue(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardMagicValue);\
  spewOperandId("valId", reader.valOperandId());\
  spewArgSeparator();\
  spewJSWhyMagicImm("magic", reader.whyMagic());\
  spewOpEnd();\
}\
\
void spewGuardFrameHasNoArgumentsObject(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardFrameHasNoArgumentsObject);\
  spewOpEnd();\
}\
\
void spewGuardNoDenseElements(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardNoDenseElements);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewGuardAndGetIndexFromString(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardAndGetIndexFromString);\
  spewOperandId("strId", reader.stringOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardAndGetInt32FromString(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardAndGetInt32FromString);\
  spewOperandId("strId", reader.stringOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardAndGetNumberFromString(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardAndGetNumberFromString);\
  spewOperandId("strId", reader.stringOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewGuardAndGetNumberFromBoolean(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardAndGetNumberFromBoolean);\
  spewOperandId("booleanId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewGuardAndGetIterator(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardAndGetIterator);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("iterOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewField("enumeratorsAddrOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewGuardHasGetterSetter(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardHasGetterSetter);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("shapeOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardGroupHasUnanalyzedNewScript(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardGroupHasUnanalyzedNewScript);\
  spewField("groupOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardIndexIsNonNegative(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIndexIsNonNegative);\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardIndexGreaterThanArrayLength(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIndexGreaterThanArrayLength);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardIndexIsValidUpdateOrAdd(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIndexIsValidUpdateOrAdd);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardIndexGreaterThanDenseInitLength(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardIndexGreaterThanDenseInitLength);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewGuardTagNotEqual(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardTagNotEqual);\
  spewOperandId("lhsId", reader.valueTagOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valueTagOperandId());\
  spewOpEnd();\
}\
\
void spewGuardXrayExpandoShapeAndDefaultProto(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardXrayExpandoShapeAndDefaultProto);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewBoolImm("hasExpando", reader.readBool());\
  spewArgSeparator();\
  spewField("shapeWrapperOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardFunctionPrototype(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardFunctionPrototype);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("protoId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("slotOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardNoAllocationMetadataBuilder(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardNoAllocationMetadataBuilder);\
  spewOpEnd();\
}\
\
void spewGuardObjectGroupNotPretenured(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardObjectGroupNotPretenured);\
  spewField("groupOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewGuardFunctionHasJitEntry(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardFunctionHasJitEntry);\
  spewOperandId("funId", reader.objOperandId());\
  spewArgSeparator();\
  spewBoolImm("constructing", reader.readBool());\
  spewOpEnd();\
}\
\
void spewGuardFunctionIsNative(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardFunctionIsNative);\
  spewOperandId("funId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewGuardFunctionIsConstructor(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardFunctionIsConstructor);\
  spewOperandId("funId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewGuardNotClassConstructor(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardNotClassConstructor);\
  spewOperandId("funId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewGuardFunApply(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardFunApply);\
  spewOperandId("argcId", reader.int32OperandId());\
  spewArgSeparator();\
  spewCallFlagsImm("flags", reader.callFlags());\
  spewOpEnd();\
}\
\
void spewLoadObject(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadObject);\
  spewOperandId("resultId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("objOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewLoadProto(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadProto);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewLoadEnclosingEnvironment(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadEnclosingEnvironment);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewLoadWrapperTarget(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadWrapperTarget);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewLoadValueTag(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadValueTag);\
  spewOperandId("valId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.valueTagOperandId());\
  spewOpEnd();\
}\
\
void spewLoadArgumentFixedSlot(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadArgumentFixedSlot);\
  spewOperandId("resultId", reader.valOperandId());\
  spewArgSeparator();\
  spewByteImm("slotIndex", reader.readByte());\
  spewOpEnd();\
}\
\
void spewLoadArgumentDynamicSlot(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadArgumentDynamicSlot);\
  spewOperandId("resultId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("argcId", reader.int32OperandId());\
  spewArgSeparator();\
  spewByteImm("slotIndex", reader.readByte());\
  spewOpEnd();\
}\
\
void spewTruncateDoubleToUInt32(CacheIRReader& reader) {\
  spewOp(CacheOp::TruncateDoubleToUInt32);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewMegamorphicLoadSlotResult(CacheIRReader& reader) {\
  spewOp(CacheOp::MegamorphicLoadSlotResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("nameOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewBoolImm("handleMissing", reader.readBool());\
  spewOpEnd();\
}\
\
void spewMegamorphicLoadSlotByValueResult(CacheIRReader& reader) {\
  spewOp(CacheOp::MegamorphicLoadSlotByValueResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("idId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("handleMissing", reader.readBool());\
  spewOpEnd();\
}\
\
void spewMegamorphicStoreSlot(CacheIRReader& reader) {\
  spewOp(CacheOp::MegamorphicStoreSlot);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("nameOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("needsTypeBarrier", reader.readBool());\
  spewOpEnd();\
}\
\
void spewMegamorphicSetElement(CacheIRReader& reader) {\
  spewOp(CacheOp::MegamorphicSetElement);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("idId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("strict", reader.readBool());\
  spewOpEnd();\
}\
\
void spewMegamorphicHasPropResult(CacheIRReader& reader) {\
  spewOp(CacheOp::MegamorphicHasPropResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("idId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("hasOwn", reader.readBool());\
  spewOpEnd();\
}\
\
void spewLoadDOMExpandoValue(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadDOMExpandoValue);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewLoadDOMExpandoValueGuardGeneration(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadDOMExpandoValueGuardGeneration);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("expandoAndGenerationOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewField("generationOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewLoadDOMExpandoValueIgnoreGeneration(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadDOMExpandoValueIgnoreGeneration);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewGuardDOMExpandoMissingOrGuardShape(CacheIRReader& reader) {\
  spewOp(CacheOp::GuardDOMExpandoMissingOrGuardShape);\
  spewOperandId("expandoId", reader.valOperandId());\
  spewArgSeparator();\
  spewField("shapeOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewStoreFixedSlot(CacheIRReader& reader) {\
  spewOp(CacheOp::StoreFixedSlot);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewStoreDynamicSlot(CacheIRReader& reader) {\
  spewOp(CacheOp::StoreDynamicSlot);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewAddAndStoreFixedSlot(CacheIRReader& reader) {\
  spewOp(CacheOp::AddAndStoreFixedSlot);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("changeGroup", reader.readBool());\
  spewArgSeparator();\
  spewField("newGroupOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewField("newShapeOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewAddAndStoreDynamicSlot(CacheIRReader& reader) {\
  spewOp(CacheOp::AddAndStoreDynamicSlot);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("changeGroup", reader.readBool());\
  spewArgSeparator();\
  spewField("newGroupOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewField("newShapeOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewAllocateAndStoreDynamicSlot(CacheIRReader& reader) {\
  spewOp(CacheOp::AllocateAndStoreDynamicSlot);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("changeGroup", reader.readBool());\
  spewArgSeparator();\
  spewField("newGroupOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewField("newShapeOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewField("numNewSlotsOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewStoreTypedObjectReferenceProperty(CacheIRReader& reader) {\
  spewOp(CacheOp::StoreTypedObjectReferenceProperty);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewTypedThingLayoutImm("layout", reader.typedThingLayout());\
  spewArgSeparator();\
  spewReferenceTypeImm("type", reader.referenceTypeDescrType());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewStoreTypedObjectScalarProperty(CacheIRReader& reader) {\
  spewOp(CacheOp::StoreTypedObjectScalarProperty);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewTypedThingLayoutImm("layout", reader.typedThingLayout());\
  spewArgSeparator();\
  spewScalarTypeImm("type", reader.scalarType());\
  spewArgSeparator();\
  spewRawOperandId("rhsId", reader.rawOperandId());\
  spewOpEnd();\
}\
\
void spewStoreDenseElement(CacheIRReader& reader) {\
  spewOp(CacheOp::StoreDenseElement);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewStoreDenseElementHole(CacheIRReader& reader) {\
  spewOp(CacheOp::StoreDenseElementHole);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("handleAdd", reader.readBool());\
  spewOpEnd();\
}\
\
void spewArrayPush(CacheIRReader& reader) {\
  spewOp(CacheOp::ArrayPush);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewArrayJoinResult(CacheIRReader& reader) {\
  spewOp(CacheOp::ArrayJoinResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewIsArrayResult(CacheIRReader& reader) {\
  spewOp(CacheOp::IsArrayResult);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewIsObjectResult(CacheIRReader& reader) {\
  spewOp(CacheOp::IsObjectResult);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewIsCallableResult(CacheIRReader& reader) {\
  spewOp(CacheOp::IsCallableResult);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewIsConstructorResult(CacheIRReader& reader) {\
  spewOp(CacheOp::IsConstructorResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewMathAbsInt32Result(CacheIRReader& reader) {\
  spewOp(CacheOp::MathAbsInt32Result);\
  spewOperandId("inputId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewMathAbsNumberResult(CacheIRReader& reader) {\
  spewOp(CacheOp::MathAbsNumberResult);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewMathSqrtNumberResult(CacheIRReader& reader) {\
  spewOp(CacheOp::MathSqrtNumberResult);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewMathFloorToInt32Result(CacheIRReader& reader) {\
  spewOp(CacheOp::MathFloorToInt32Result);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewMathCeilToInt32Result(CacheIRReader& reader) {\
  spewOp(CacheOp::MathCeilToInt32Result);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewMathRoundToInt32Result(CacheIRReader& reader) {\
  spewOp(CacheOp::MathRoundToInt32Result);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewMathFunctionNumberResult(CacheIRReader& reader) {\
  spewOp(CacheOp::MathFunctionNumberResult);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewArgSeparator();\
  spewUnaryMathFunctionImm("fun", reader.unaryMathFunction());\
  spewOpEnd();\
}\
\
void spewStoreTypedArrayElement(CacheIRReader& reader) {\
  spewOp(CacheOp::StoreTypedArrayElement);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewScalarTypeImm("elementType", reader.scalarType());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewArgSeparator();\
  spewRawOperandId("rhsId", reader.rawOperandId());\
  spewArgSeparator();\
  spewBoolImm("handleOOB", reader.readBool());\
  spewOpEnd();\
}\
\
void spewStoreTypedObjectElement(CacheIRReader& reader) {\
  spewOp(CacheOp::StoreTypedObjectElement);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewTypedThingLayoutImm("layout", reader.typedThingLayout());\
  spewArgSeparator();\
  spewScalarTypeImm("elementType", reader.scalarType());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewArgSeparator();\
  spewRawOperandId("rhsId", reader.rawOperandId());\
  spewOpEnd();\
}\
\
void spewCallNativeSetter(CacheIRReader& reader) {\
  spewOp(CacheOp::CallNativeSetter);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("setterOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewCallScriptedSetter(CacheIRReader& reader) {\
  spewOp(CacheOp::CallScriptedSetter);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("setterOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("sameRealm", reader.readBool());\
  spewOpEnd();\
}\
\
void spewCallSetArrayLength(CacheIRReader& reader) {\
  spewOp(CacheOp::CallSetArrayLength);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewBoolImm("strict", reader.readBool());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewCallProxySet(CacheIRReader& reader) {\
  spewOp(CacheOp::CallProxySet);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("idOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("strict", reader.readBool());\
  spewOpEnd();\
}\
\
void spewCallProxySetByValue(CacheIRReader& reader) {\
  spewOp(CacheOp::CallProxySetByValue);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("idId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("strict", reader.readBool());\
  spewOpEnd();\
}\
\
void spewCallAddOrUpdateSparseElementHelper(CacheIRReader& reader) {\
  spewOp(CacheOp::CallAddOrUpdateSparseElementHelper);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("idId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("strict", reader.readBool());\
  spewOpEnd();\
}\
\
void spewCallInt32ToString(CacheIRReader& reader) {\
  spewOp(CacheOp::CallInt32ToString);\
  spewOperandId("inputId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.stringOperandId());\
  spewOpEnd();\
}\
\
void spewCallNumberToString(CacheIRReader& reader) {\
  spewOp(CacheOp::CallNumberToString);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.stringOperandId());\
  spewOpEnd();\
}\
\
void spewBooleanToString(CacheIRReader& reader) {\
  spewOp(CacheOp::BooleanToString);\
  spewOperandId("inputId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("resultId", reader.stringOperandId());\
  spewOpEnd();\
}\
\
void spewCallScriptedFunction(CacheIRReader& reader) {\
  spewOp(CacheOp::CallScriptedFunction);\
  spewOperandId("calleeId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("argcId", reader.int32OperandId());\
  spewArgSeparator();\
  spewCallFlagsImm("flags", reader.callFlags());\
  spewOpEnd();\
}\
\
void spewCallNativeFunction(CacheIRReader& reader) {\
  spewOp(CacheOp::CallNativeFunction);\
  spewOperandId("calleeId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("argcId", reader.int32OperandId());\
  spewArgSeparator();\
  spewCallFlagsImm("flags", reader.callFlags());\
  spewArgSeparator();\
  spewBoolImm("ignoresReturnValue", reader.readBool());\
  spewOpEnd();\
}\
\
void spewCallClassHook(CacheIRReader& reader) {\
  spewOp(CacheOp::CallClassHook);\
  spewOperandId("calleeId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("argcId", reader.int32OperandId());\
  spewArgSeparator();\
  spewCallFlagsImm("flags", reader.callFlags());\
  spewArgSeparator();\
  spewField("targetOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewMetaTwoByte(CacheIRReader& reader) {\
  spewOp(CacheOp::MetaTwoByte);\
  spewMetaTwoByteKindImm("kind", reader.metaKind<MetaTwoByteKind>());\
  spewArgSeparator();\
  spewField("functionObjectOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewField("templateObjectOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewLoadFixedSlotResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadFixedSlotResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewLoadDynamicSlotResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadDynamicSlotResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewLoadTypedObjectResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadTypedObjectResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewTypedThingLayoutImm("layout", reader.typedThingLayout());\
  spewArgSeparator();\
  spewByteImm("typeDescr", reader.readByte());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewLoadDenseElementResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadDenseElementResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewLoadDenseElementHoleResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadDenseElementHoleResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewCallGetSparseElementResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallGetSparseElementResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewLoadDenseElementExistsResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadDenseElementExistsResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewLoadTypedElementExistsResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadTypedElementExistsResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewArgSeparator();\
  spewTypedThingLayoutImm("layout", reader.typedThingLayout());\
  spewOpEnd();\
}\
\
void spewLoadDenseElementHoleExistsResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadDenseElementHoleExistsResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewLoadTypedArrayElementResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadTypedArrayElementResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewArgSeparator();\
  spewScalarTypeImm("elementType", reader.scalarType());\
  spewArgSeparator();\
  spewBoolImm("handleOOB", reader.readBool());\
  spewOpEnd();\
}\
\
void spewLoadTypedObjectElementResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadTypedObjectElementResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewArgSeparator();\
  spewTypedThingLayoutImm("layout", reader.typedThingLayout());\
  spewArgSeparator();\
  spewScalarTypeImm("elementType", reader.scalarType());\
  spewOpEnd();\
}\
\
void spewLoadInt32ArrayLengthResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadInt32ArrayLengthResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewLoadArgumentsObjectArgResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadArgumentsObjectArgResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewLoadArgumentsObjectLengthResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadArgumentsObjectLengthResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewLoadFunctionLengthResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadFunctionLengthResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewLoadTypedArrayLengthResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadTypedArrayLengthResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("getterOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewLoadStringCharResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadStringCharResult);\
  spewOperandId("strId", reader.stringOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewLoadStringCharCodeResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadStringCharCodeResult);\
  spewOperandId("strId", reader.stringOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewLoadStringLengthResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadStringLengthResult);\
  spewOperandId("strId", reader.stringOperandId());\
  spewOpEnd();\
}\
\
void spewLoadFrameCalleeResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadFrameCalleeResult);\
  spewOpEnd();\
}\
\
void spewLoadFrameNumActualArgsResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadFrameNumActualArgsResult);\
  spewOpEnd();\
}\
\
void spewLoadFrameArgumentResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadFrameArgumentResult);\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewLoadEnvironmentFixedSlotResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadEnvironmentFixedSlotResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewLoadEnvironmentDynamicSlotResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadEnvironmentDynamicSlotResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("offsetOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewLoadObjectResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadObjectResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewLoadStringResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadStringResult);\
  spewOperandId("strId", reader.stringOperandId());\
  spewOpEnd();\
}\
\
void spewLoadInt32Result(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadInt32Result);\
  spewOperandId("valId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewLoadDoubleResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadDoubleResult);\
  spewOperandId("valId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewLoadBigIntResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadBigIntResult);\
  spewOperandId("valId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewCallScriptedGetterResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallScriptedGetterResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("getterOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewBoolImm("sameRealm", reader.readBool());\
  spewOpEnd();\
}\
\
void spewCallScriptedGetterByValueResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallScriptedGetterByValueResult);\
  spewOperandId("valId", reader.valOperandId());\
  spewArgSeparator();\
  spewField("getterOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewBoolImm("sameRealm", reader.readBool());\
  spewOpEnd();\
}\
\
void spewCallNativeGetterResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallNativeGetterResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("getterOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewCallNativeGetterByValueResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallNativeGetterByValueResult);\
  spewOperandId("valId", reader.valOperandId());\
  spewArgSeparator();\
  spewField("getterOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewCallProxyGetResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallProxyGetResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewField("idOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewCallProxyGetByValueResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallProxyGetByValueResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("idId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewCallProxyHasPropResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallProxyHasPropResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("idId", reader.valOperandId());\
  spewArgSeparator();\
  spewBoolImm("hasOwn", reader.readBool());\
  spewOpEnd();\
}\
\
void spewCallObjectHasSparseElementResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallObjectHasSparseElementResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewCallNativeGetElementResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallNativeGetElementResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("indexId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewLoadUndefinedResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadUndefinedResult);\
  spewOpEnd();\
}\
\
void spewLoadBooleanResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadBooleanResult);\
  spewBoolImm("val", reader.readBool());\
  spewOpEnd();\
}\
\
void spewLoadConstantStringResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadConstantStringResult);\
  spewField("strOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewLoadInstanceOfObjectResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadInstanceOfObjectResult);\
  spewOperandId("lhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("protoId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewLoadTypeOfObjectResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadTypeOfObjectResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewDoubleAddResult(CacheIRReader& reader) {\
  spewOp(CacheOp::DoubleAddResult);\
  spewOperandId("lhsId", reader.numberOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewDoubleSubResult(CacheIRReader& reader) {\
  spewOp(CacheOp::DoubleSubResult);\
  spewOperandId("lhsId", reader.numberOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewDoubleMulResult(CacheIRReader& reader) {\
  spewOp(CacheOp::DoubleMulResult);\
  spewOperandId("lhsId", reader.numberOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewDoubleDivResult(CacheIRReader& reader) {\
  spewOp(CacheOp::DoubleDivResult);\
  spewOperandId("lhsId", reader.numberOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewDoubleModResult(CacheIRReader& reader) {\
  spewOp(CacheOp::DoubleModResult);\
  spewOperandId("lhsId", reader.numberOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewDoublePowResult(CacheIRReader& reader) {\
  spewOp(CacheOp::DoublePowResult);\
  spewOperandId("lhsId", reader.numberOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewInt32AddResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32AddResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32SubResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32SubResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32MulResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32MulResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32DivResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32DivResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32ModResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32ModResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32PowResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32PowResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewBigIntAddResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntAddResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntSubResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntSubResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntMulResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntMulResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntDivResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntDivResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntModResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntModResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntPowResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntPowResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewInt32BitOrResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32BitOrResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32BitXorResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32BitXorResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32BitAndResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32BitAndResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32LeftShiftResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32LeftShiftResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32RightShiftResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32RightShiftResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32URightShiftResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32URightShiftResult);\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewBoolImm("allowDouble", reader.readBool());\
  spewOpEnd();\
}\
\
void spewInt32NotResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32NotResult);\
  spewOperandId("inputId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewBigIntBitOrResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntBitOrResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntBitXorResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntBitXorResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntBitAndResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntBitAndResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntLeftShiftResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntLeftShiftResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntRightShiftResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntRightShiftResult);\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntNotResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntNotResult);\
  spewOperandId("inputId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewInt32NegationResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32NegationResult);\
  spewOperandId("inputId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewDoubleNegationResult(CacheIRReader& reader) {\
  spewOp(CacheOp::DoubleNegationResult);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntNegationResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntNegationResult);\
  spewOperandId("inputId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewInt32IncResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32IncResult);\
  spewOperandId("inputId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewInt32DecResult(CacheIRReader& reader) {\
  spewOp(CacheOp::Int32DecResult);\
  spewOperandId("inputId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewDoubleIncResult(CacheIRReader& reader) {\
  spewOp(CacheOp::DoubleIncResult);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewDoubleDecResult(CacheIRReader& reader) {\
  spewOp(CacheOp::DoubleDecResult);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntIncResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntIncResult);\
  spewOperandId("inputId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewBigIntDecResult(CacheIRReader& reader) {\
  spewOp(CacheOp::BigIntDecResult);\
  spewOperandId("inputId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewLoadInt32TruthyResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadInt32TruthyResult);\
  spewOperandId("inputId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewLoadDoubleTruthyResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadDoubleTruthyResult);\
  spewOperandId("inputId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewLoadStringTruthyResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadStringTruthyResult);\
  spewOperandId("strId", reader.stringOperandId());\
  spewOpEnd();\
}\
\
void spewLoadObjectTruthyResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadObjectTruthyResult);\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewLoadBigIntTruthyResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadBigIntTruthyResult);\
  spewOperandId("bigIntId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewLoadValueResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadValueResult);\
  spewField("valOffset", reader.stubOffset());\
  spewOpEnd();\
}\
\
void spewLoadNewObjectFromTemplateResult(CacheIRReader& reader) {\
  spewOp(CacheOp::LoadNewObjectFromTemplateResult);\
  spewField("templateObjectOffset", reader.stubOffset());\
  spewArgSeparator();\
  spewUInt32Imm("disambiguationIdHi", reader.uint32Immediate());\
  spewArgSeparator();\
  spewUInt32Imm("disambiguationIdLo", reader.uint32Immediate());\
  spewOpEnd();\
}\
\
void spewCallStringConcatResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallStringConcatResult);\
  spewOperandId("lhsId", reader.stringOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.stringOperandId());\
  spewOpEnd();\
}\
\
void spewCallStringObjectConcatResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallStringObjectConcatResult);\
  spewOperandId("lhsId", reader.valOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewCallIsSuspendedGeneratorResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CallIsSuspendedGeneratorResult);\
  spewOperandId("valId", reader.valOperandId());\
  spewOpEnd();\
}\
\
void spewCompareStringResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareStringResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.stringOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.stringOperandId());\
  spewOpEnd();\
}\
\
void spewCompareObjectResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareObjectResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.objOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewCompareSymbolResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareSymbolResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.symbolOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.symbolOperandId());\
  spewOpEnd();\
}\
\
void spewCompareInt32Result(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareInt32Result);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewCompareDoubleResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareDoubleResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.numberOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewCompareBigIntResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareBigIntResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewCompareBigIntInt32Result(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareBigIntInt32Result);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.int32OperandId());\
  spewOpEnd();\
}\
\
void spewCompareInt32BigIntResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareInt32BigIntResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.int32OperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewCompareBigIntNumberResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareBigIntNumberResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.numberOperandId());\
  spewOpEnd();\
}\
\
void spewCompareNumberBigIntResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareNumberBigIntResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.numberOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewCompareBigIntStringResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareBigIntStringResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.bigIntOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.stringOperandId());\
  spewOpEnd();\
}\
\
void spewCompareStringBigIntResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareStringBigIntResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("lhsId", reader.stringOperandId());\
  spewArgSeparator();\
  spewOperandId("rhsId", reader.bigIntOperandId());\
  spewOpEnd();\
}\
\
void spewCompareObjectUndefinedNullResult(CacheIRReader& reader) {\
  spewOp(CacheOp::CompareObjectUndefinedNullResult);\
  spewJSOpImm("op", reader.jsop());\
  spewArgSeparator();\
  spewOperandId("objId", reader.objOperandId());\
  spewOpEnd();\
}\
\
void spewCallPrintString(CacheIRReader& reader) {\
  spewOp(CacheOp::CallPrintString);\
  spewStaticStringImm("str", reinterpret_cast<char*>(reader.pointer()));\
  spewOpEnd();\
}\
\
void spewBreakpoint(CacheIRReader& reader) {\
  spewOp(CacheOp::Breakpoint);\
  spewOpEnd();\
}\
\
void spewTypeMonitorResult(CacheIRReader& reader) {\
  spewOp(CacheOp::TypeMonitorResult);\
  spewOpEnd();\
}\
\
void spewReturnFromIC(CacheIRReader& reader) {\
  spewOp(CacheOp::ReturnFromIC);\
  spewOpEnd();\
}\
\
void spewWrapResult(CacheIRReader& reader) {\
  spewOp(CacheOp::WrapResult);\
  spewOpEnd();\
}\




#endif // jit_CacheIROpsGenerated_h
